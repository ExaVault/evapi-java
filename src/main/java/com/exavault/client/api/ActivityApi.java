/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.api;

import com.exavault.client.ApiCallback;
import com.exavault.client.ApiClient;
import com.exavault.client.ApiException;
import com.exavault.client.ApiResponse;
import com.exavault.client.Configuration;
import com.exavault.client.Pair;
import com.exavault.client.ProgressRequestBody;
import com.exavault.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import com.exavault.client.model.SessionActivityResponse;
import com.exavault.client.model.WebhooksActivityResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivityApi {
    private ApiClient apiClient;

    public ActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivityApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getSessionLogs
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSessionLogsCall(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activity/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (ipAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ipAddress", ipAddress));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (evApiKey != null)
        localVarHeaderParams.put("ev-api-key", apiClient.parameterToString(evApiKey));
        if (evAccessToken != null)
        localVarHeaderParams.put("ev-access-token", apiClient.parameterToString(evAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSessionLogsValidateBeforeCall(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling getSessionLogs(Async)");
        }
        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling getSessionLogs(Async)");
        }
        
        com.squareup.okhttp.Call call = getSessionLogsCall(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get activity logs
     * Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return SessionActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SessionActivityResponse getSessionLogs(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort) throws ApiException {
        ApiResponse<SessionActivityResponse> resp = getSessionLogsWithHttpInfo(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort);
        return resp.getData();
    }

    /**
     * Get activity logs
     * Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return ApiResponse&lt;SessionActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionActivityResponse> getSessionLogsWithHttpInfo(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getSessionLogsValidateBeforeCall(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<SessionActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get activity logs (asynchronously)
     * Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSessionLogsAsync(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort, final ApiCallback<SessionActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSessionLogsValidateBeforeCall(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SessionActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookLogs
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param event Filter by triggered event (optional)
     * @param statusCode Filter by webhook response status code (optional)
     * @param path Path used to filter records (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogsCall(String evApiKey, String evAccessToken, String event, Integer statusCode, String path, String username, Integer offset, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activity/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (event != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("event", event));
        if (statusCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statusCode", statusCode));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (evApiKey != null)
        localVarHeaderParams.put("ev-api-key", apiClient.parameterToString(evApiKey));
        if (evAccessToken != null)
        localVarHeaderParams.put("ev-access-token", apiClient.parameterToString(evAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookLogsValidateBeforeCall(String evApiKey, String evAccessToken, String event, Integer statusCode, String path, String username, Integer offset, Integer limit, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling getWebhookLogs(Async)");
        }
        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling getWebhookLogs(Async)");
        }
        
        com.squareup.okhttp.Call call = getWebhookLogsCall(evApiKey, evAccessToken, event, statusCode, path, username, offset, limit, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get webhook logs
     * Returns the webhook logs for your account. Optional query paramaters will filter the returned results based on a number of options including path, tpye of event, or status code.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). These are the valid options for event types:  - Upload - Download - Delete File - Delete Folder - Create Folder - Rename - Move - Copy - Compress - Extract - Share Folder - Send Files - Receive Files - Update Share - Update Receive - Delete Send - Delete Receive - Delete Share - Create Notification - Update Notification - Delete Notification - Create User - Update User  - Delete User - Connect - Disconnect
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param event Filter by triggered event (optional)
     * @param statusCode Filter by webhook response status code (optional)
     * @param path Path used to filter records (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return WebhooksActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhooksActivityResponse getWebhookLogs(String evApiKey, String evAccessToken, String event, Integer statusCode, String path, String username, Integer offset, Integer limit, String sort) throws ApiException {
        ApiResponse<WebhooksActivityResponse> resp = getWebhookLogsWithHttpInfo(evApiKey, evAccessToken, event, statusCode, path, username, offset, limit, sort);
        return resp.getData();
    }

    /**
     * Get webhook logs
     * Returns the webhook logs for your account. Optional query paramaters will filter the returned results based on a number of options including path, tpye of event, or status code.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). These are the valid options for event types:  - Upload - Download - Delete File - Delete Folder - Create Folder - Rename - Move - Copy - Compress - Extract - Share Folder - Send Files - Receive Files - Update Share - Update Receive - Delete Send - Delete Receive - Delete Share - Create Notification - Update Notification - Delete Notification - Create User - Update User  - Delete User - Connect - Disconnect
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param event Filter by triggered event (optional)
     * @param statusCode Filter by webhook response status code (optional)
     * @param path Path used to filter records (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return ApiResponse&lt;WebhooksActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhooksActivityResponse> getWebhookLogsWithHttpInfo(String evApiKey, String evAccessToken, String event, Integer statusCode, String path, String username, Integer offset, Integer limit, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookLogsValidateBeforeCall(evApiKey, evAccessToken, event, statusCode, path, username, offset, limit, sort, null, null);
        Type localVarReturnType = new TypeToken<WebhooksActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get webhook logs (asynchronously)
     * Returns the webhook logs for your account. Optional query paramaters will filter the returned results based on a number of options including path, tpye of event, or status code.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). These are the valid options for event types:  - Upload - Download - Delete File - Delete Folder - Create Folder - Rename - Move - Copy - Compress - Extract - Share Folder - Send Files - Receive Files - Update Share - Update Receive - Delete Send - Delete Receive - Delete Share - Create Notification - Update Notification - Delete Notification - Create User - Update User  - Delete User - Connect - Disconnect
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param event Filter by triggered event (optional)
     * @param statusCode Filter by webhook response status code (optional)
     * @param path Path used to filter records (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogsAsync(String evApiKey, String evAccessToken, String event, Integer statusCode, String path, String username, Integer offset, Integer limit, String sort, final ApiCallback<WebhooksActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookLogsValidateBeforeCall(evApiKey, evAccessToken, event, statusCode, path, username, offset, limit, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhooksActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

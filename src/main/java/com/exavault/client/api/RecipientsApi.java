/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.api;

import com.exavault.client.ApiCallback;
import com.exavault.client.ApiClient;
import com.exavault.client.ApiException;
import com.exavault.client.ApiResponse;
import com.exavault.client.Configuration;
import com.exavault.client.Pair;
import com.exavault.client.ProgressRequestBody;
import com.exavault.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.exavault.client.model.Body18;
import com.exavault.client.model.ShareRecipientsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecipientsApi {
    private ApiClient apiClient;

    public RecipientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecipientsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for resendInvitationsForShare
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resendInvitationsForShareCall(String evApiKey, String evAccessToken, Integer shareId, Body18 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/recipients/shares/invites/{shareId}"
            .replaceAll("\\{" + "shareId" + "\\}", apiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (evApiKey != null)
        localVarHeaderParams.put("ev-api-key", apiClient.parameterToString(evApiKey));
        if (evAccessToken != null)
        localVarHeaderParams.put("ev-access-token", apiClient.parameterToString(evAccessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resendInvitationsForShareValidateBeforeCall(String evApiKey, String evAccessToken, Integer shareId, Body18 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling resendInvitationsForShare(Async)");
        }
        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling resendInvitationsForShare(Async)");
        }
        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling resendInvitationsForShare(Async)");
        }
        
        com.squareup.okhttp.Call call = resendInvitationsForShareCall(evApiKey, evAccessToken, shareId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resend invitations to share recipients
     * Resend invitations to one or all recipients attached to specified share. The most recent message that was sent for the share will be re-used for this email.  You can use [GET /shares/{id}](#operation/getShareById) to view the recipient list and message history for a share. Use [PATCH /shares/{id}](#operation/updateShareById) to add or remove recipients.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param body  (optional)
     * @return ShareRecipientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShareRecipientsResponse resendInvitationsForShare(String evApiKey, String evAccessToken, Integer shareId, Body18 body) throws ApiException {
        ApiResponse<ShareRecipientsResponse> resp = resendInvitationsForShareWithHttpInfo(evApiKey, evAccessToken, shareId, body);
        return resp.getData();
    }

    /**
     * Resend invitations to share recipients
     * Resend invitations to one or all recipients attached to specified share. The most recent message that was sent for the share will be re-used for this email.  You can use [GET /shares/{id}](#operation/getShareById) to view the recipient list and message history for a share. Use [PATCH /shares/{id}](#operation/updateShareById) to add or remove recipients.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ShareRecipientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShareRecipientsResponse> resendInvitationsForShareWithHttpInfo(String evApiKey, String evAccessToken, Integer shareId, Body18 body) throws ApiException {
        com.squareup.okhttp.Call call = resendInvitationsForShareValidateBeforeCall(evApiKey, evAccessToken, shareId, body, null, null);
        Type localVarReturnType = new TypeToken<ShareRecipientsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resend invitations to share recipients (asynchronously)
     * Resend invitations to one or all recipients attached to specified share. The most recent message that was sent for the share will be re-used for this email.  You can use [GET /shares/{id}](#operation/getShareById) to view the recipient list and message history for a share. Use [PATCH /shares/{id}](#operation/updateShareById) to add or remove recipients.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resendInvitationsForShareAsync(String evApiKey, String evAccessToken, Integer shareId, Body18 body, final ApiCallback<ShareRecipientsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resendInvitationsForShareValidateBeforeCall(evApiKey, evAccessToken, shareId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ShareRecipientsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.exavault.client.model.AccountAllowedIpRanges;
import com.exavault.client.model.BrandingSettings1;
import com.exavault.client.model.CallbackSettings1;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * UpdateAccountBody
 */


public class UpdateAccountBody {
  @SerializedName("quotaNoticeEnabled")
  private Boolean quotaNoticeEnabled = null;

  @SerializedName("quotaNoticeThreshold")
  private Integer quotaNoticeThreshold = null;

  @SerializedName("secureOnly")
  private Boolean secureOnly = null;

  @SerializedName("complexPasswords")
  private Boolean complexPasswords = null;

  @SerializedName("showReferralLinks")
  private Boolean showReferralLinks = null;

  @SerializedName("externalDomain")
  private String externalDomain = null;

  @SerializedName("emailContent")
  private String emailContent = null;

  @SerializedName("emailSubject")
  private String emailSubject = null;

  @SerializedName("allowedIpRanges")
  private List<AccountAllowedIpRanges> allowedIpRanges = null;

  @SerializedName("callbackSettings")
  private CallbackSettings1 callbackSettings = null;

  @SerializedName("brandingSettings")
  private BrandingSettings1 brandingSettings = null;

  @SerializedName("accountOnboarding")
  private Boolean accountOnboarding = null;

  @SerializedName("customSignature")
  private String customSignature = null;

  public UpdateAccountBody quotaNoticeEnabled(Boolean quotaNoticeEnabled) {
    this.quotaNoticeEnabled = quotaNoticeEnabled;
    return this;
  }

   /**
   * Whether the system should email the account owner when usage exceeds quotaNoticeThreshold value
   * @return quotaNoticeEnabled
  **/
  @Schema(example = "false", description = "Whether the system should email the account owner when usage exceeds quotaNoticeThreshold value")
  public Boolean isQuotaNoticeEnabled() {
    return quotaNoticeEnabled;
  }

  public void setQuotaNoticeEnabled(Boolean quotaNoticeEnabled) {
    this.quotaNoticeEnabled = quotaNoticeEnabled;
  }

  public UpdateAccountBody quotaNoticeThreshold(Integer quotaNoticeThreshold) {
    this.quotaNoticeThreshold = quotaNoticeThreshold;
    return this;
  }

   /**
   * Percent of account usage to trigger quota notices for.
   * minimum: 70
   * maximum: 100
   * @return quotaNoticeThreshold
  **/
  @Schema(example = "90", description = "Percent of account usage to trigger quota notices for.")
  public Integer getQuotaNoticeThreshold() {
    return quotaNoticeThreshold;
  }

  public void setQuotaNoticeThreshold(Integer quotaNoticeThreshold) {
    this.quotaNoticeThreshold = quotaNoticeThreshold;
  }

  public UpdateAccountBody secureOnly(Boolean secureOnly) {
    this.secureOnly = secureOnly;
    return this;
  }

   /**
   * Whether unencrypted FTP connections should be denied for the account.
   * @return secureOnly
  **/
  @Schema(example = "false", description = "Whether unencrypted FTP connections should be denied for the account.")
  public Boolean isSecureOnly() {
    return secureOnly;
  }

  public void setSecureOnly(Boolean secureOnly) {
    this.secureOnly = secureOnly;
  }

  public UpdateAccountBody complexPasswords(Boolean complexPasswords) {
    this.complexPasswords = complexPasswords;
    return this;
  }

   /**
   * Whether to require complex passwords for all passwords.
   * @return complexPasswords
  **/
  @Schema(example = "false", description = "Whether to require complex passwords for all passwords.")
  public Boolean isComplexPasswords() {
    return complexPasswords;
  }

  public void setComplexPasswords(Boolean complexPasswords) {
    this.complexPasswords = complexPasswords;
  }

  public UpdateAccountBody showReferralLinks(Boolean showReferralLinks) {
    this.showReferralLinks = showReferralLinks;
    return this;
  }

   /**
   * Whether to display links for others to sign up on share views and invitation emails
   * @return showReferralLinks
  **/
  @Schema(example = "false", description = "Whether to display links for others to sign up on share views and invitation emails")
  public Boolean isShowReferralLinks() {
    return showReferralLinks;
  }

  public void setShowReferralLinks(Boolean showReferralLinks) {
    this.showReferralLinks = showReferralLinks;
  }

  public UpdateAccountBody externalDomain(String externalDomain) {
    this.externalDomain = externalDomain;
    return this;
  }

   /**
   * Custom address used for web file manager. Not available for all account types.
   * @return externalDomain
  **/
  @Schema(description = "Custom address used for web file manager. Not available for all account types.")
  public String getExternalDomain() {
    return externalDomain;
  }

  public void setExternalDomain(String externalDomain) {
    this.externalDomain = externalDomain;
  }

  public UpdateAccountBody emailContent(String emailContent) {
    this.emailContent = emailContent;
    return this;
  }

   /**
   * Content of welcome email template.
   * @return emailContent
  **/
  @Schema(example = "Great news, your new account is ready! For your records, we've listed information you'll use to log in below: FTP Server: [[ftpserver]] Username (Web and FTP access): [[username]] [[setpassword]]", description = "Content of welcome email template.")
  public String getEmailContent() {
    return emailContent;
  }

  public void setEmailContent(String emailContent) {
    this.emailContent = emailContent;
  }

  public UpdateAccountBody emailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
    return this;
  }

   /**
   * Subject line for welcome emails
   * @return emailSubject
  **/
  @Schema(example = "ExaVault File Sharing Account", description = "Subject line for welcome emails")
  public String getEmailSubject() {
    return emailSubject;
  }

  public void setEmailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
  }

  public UpdateAccountBody allowedIpRanges(List<AccountAllowedIpRanges> allowedIpRanges) {
    this.allowedIpRanges = allowedIpRanges;
    return this;
  }

  public UpdateAccountBody addAllowedIpRangesItem(AccountAllowedIpRanges allowedIpRangesItem) {
    if (this.allowedIpRanges == null) {
      this.allowedIpRanges = new ArrayList<AccountAllowedIpRanges>();
    }
    this.allowedIpRanges.add(allowedIpRangesItem);
    return this;
  }

   /**
   * IP Address Ranges for restricting account access
   * @return allowedIpRanges
  **/
  @Schema(description = "IP Address Ranges for restricting account access")
  public List<AccountAllowedIpRanges> getAllowedIpRanges() {
    return allowedIpRanges;
  }

  public void setAllowedIpRanges(List<AccountAllowedIpRanges> allowedIpRanges) {
    this.allowedIpRanges = allowedIpRanges;
  }

  public UpdateAccountBody callbackSettings(CallbackSettings1 callbackSettings) {
    this.callbackSettings = callbackSettings;
    return this;
  }

   /**
   * Get callbackSettings
   * @return callbackSettings
  **/
  @Schema(description = "")
  public CallbackSettings1 getCallbackSettings() {
    return callbackSettings;
  }

  public void setCallbackSettings(CallbackSettings1 callbackSettings) {
    this.callbackSettings = callbackSettings;
  }

  public UpdateAccountBody brandingSettings(BrandingSettings1 brandingSettings) {
    this.brandingSettings = brandingSettings;
    return this;
  }

   /**
   * Get brandingSettings
   * @return brandingSettings
  **/
  @Schema(description = "")
  public BrandingSettings1 getBrandingSettings() {
    return brandingSettings;
  }

  public void setBrandingSettings(BrandingSettings1 brandingSettings) {
    this.brandingSettings = brandingSettings;
  }

  public UpdateAccountBody accountOnboarding(Boolean accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
    return this;
  }

   /**
   * Whether extra help popups can be enabled for users in the web file manager.
   * @return accountOnboarding
  **/
  @Schema(example = "true", description = "Whether extra help popups can be enabled for users in the web file manager.")
  public Boolean isAccountOnboarding() {
    return accountOnboarding;
  }

  public void setAccountOnboarding(Boolean accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
  }

  public UpdateAccountBody customSignature(String customSignature) {
    this.customSignature = customSignature;
    return this;
  }

   /**
   * Signature to be automatically added to the bottom of emails generated by the account.
   * @return customSignature
  **/
  @Schema(description = "Signature to be automatically added to the bottom of emails generated by the account.")
  public String getCustomSignature() {
    return customSignature;
  }

  public void setCustomSignature(String customSignature) {
    this.customSignature = customSignature;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccountBody updateAccountBody = (UpdateAccountBody) o;
    return Objects.equals(this.quotaNoticeEnabled, updateAccountBody.quotaNoticeEnabled) &&
        Objects.equals(this.quotaNoticeThreshold, updateAccountBody.quotaNoticeThreshold) &&
        Objects.equals(this.secureOnly, updateAccountBody.secureOnly) &&
        Objects.equals(this.complexPasswords, updateAccountBody.complexPasswords) &&
        Objects.equals(this.showReferralLinks, updateAccountBody.showReferralLinks) &&
        Objects.equals(this.externalDomain, updateAccountBody.externalDomain) &&
        Objects.equals(this.emailContent, updateAccountBody.emailContent) &&
        Objects.equals(this.emailSubject, updateAccountBody.emailSubject) &&
        Objects.equals(this.allowedIpRanges, updateAccountBody.allowedIpRanges) &&
        Objects.equals(this.callbackSettings, updateAccountBody.callbackSettings) &&
        Objects.equals(this.brandingSettings, updateAccountBody.brandingSettings) &&
        Objects.equals(this.accountOnboarding, updateAccountBody.accountOnboarding) &&
        Objects.equals(this.customSignature, updateAccountBody.customSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quotaNoticeEnabled, quotaNoticeThreshold, secureOnly, complexPasswords, showReferralLinks, externalDomain, emailContent, emailSubject, allowedIpRanges, callbackSettings, brandingSettings, accountOnboarding, customSignature);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccountBody {\n");
    
    sb.append("    quotaNoticeEnabled: ").append(toIndentedString(quotaNoticeEnabled)).append("\n");
    sb.append("    quotaNoticeThreshold: ").append(toIndentedString(quotaNoticeThreshold)).append("\n");
    sb.append("    secureOnly: ").append(toIndentedString(secureOnly)).append("\n");
    sb.append("    complexPasswords: ").append(toIndentedString(complexPasswords)).append("\n");
    sb.append("    showReferralLinks: ").append(toIndentedString(showReferralLinks)).append("\n");
    sb.append("    externalDomain: ").append(toIndentedString(externalDomain)).append("\n");
    sb.append("    emailContent: ").append(toIndentedString(emailContent)).append("\n");
    sb.append("    emailSubject: ").append(toIndentedString(emailSubject)).append("\n");
    sb.append("    allowedIpRanges: ").append(toIndentedString(allowedIpRanges)).append("\n");
    sb.append("    callbackSettings: ").append(toIndentedString(callbackSettings)).append("\n");
    sb.append("    brandingSettings: ").append(toIndentedString(brandingSettings)).append("\n");
    sb.append("    accountOnboarding: ").append(toIndentedString(accountOnboarding)).append("\n");
    sb.append("    customSignature: ").append(toIndentedString(customSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Whether a webhook should be sent for various operations.
 */
@Schema(description = "Whether a webhook should be sent for various operations.")

public class CallbackSettings1Triggers {
  @SerializedName("download")
  private Boolean download = null;

  @SerializedName("upload")
  private Boolean upload = null;

  @SerializedName("delete")
  private Boolean delete = null;

  @SerializedName("createFolder")
  private Boolean createFolder = null;

  @SerializedName("rename")
  private Boolean rename = null;

  @SerializedName("move")
  private Boolean move = null;

  @SerializedName("copy")
  private Boolean copy = null;

  @SerializedName("compress")
  private Boolean compress = null;

  @SerializedName("extract")
  private Boolean extract = null;

  @SerializedName("shareFolder")
  private Boolean shareFolder = null;

  @SerializedName("sendFiles")
  private Boolean sendFiles = null;

  @SerializedName("receiveFiles")
  private Boolean receiveFiles = null;

  @SerializedName("updateShare")
  private Boolean updateShare = null;

  @SerializedName("updateReceive")
  private Boolean updateReceive = null;

  @SerializedName("deleteSend")
  private Boolean deleteSend = null;

  @SerializedName("deleteReceive")
  private Boolean deleteReceive = null;

  @SerializedName("deleteShare")
  private Boolean deleteShare = null;

  @SerializedName("createNotification")
  private Boolean createNotification = null;

  @SerializedName("updateNotification")
  private Boolean updateNotification = null;

  @SerializedName("deleteNotification")
  private Boolean deleteNotification = null;

  @SerializedName("createUser")
  private Boolean createUser = null;

  @SerializedName("updateUser")
  private Boolean updateUser = null;

  @SerializedName("deleteUser")
  private Boolean deleteUser = null;

  @SerializedName("userConnect")
  private Boolean userConnect = null;

  @SerializedName("userDisconnect")
  private Boolean userDisconnect = null;

  public CallbackSettings1Triggers download(Boolean download) {
    this.download = download;
    return this;
  }

   /**
   * Get download
   * @return download
  **/
  @Schema(description = "")
  public Boolean isDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }

  public CallbackSettings1Triggers upload(Boolean upload) {
    this.upload = upload;
    return this;
  }

   /**
   * Get upload
   * @return upload
  **/
  @Schema(description = "")
  public Boolean isUpload() {
    return upload;
  }

  public void setUpload(Boolean upload) {
    this.upload = upload;
  }

  public CallbackSettings1Triggers delete(Boolean delete) {
    this.delete = delete;
    return this;
  }

   /**
   * Get delete
   * @return delete
  **/
  @Schema(description = "")
  public Boolean isDelete() {
    return delete;
  }

  public void setDelete(Boolean delete) {
    this.delete = delete;
  }

  public CallbackSettings1Triggers createFolder(Boolean createFolder) {
    this.createFolder = createFolder;
    return this;
  }

   /**
   * Get createFolder
   * @return createFolder
  **/
  @Schema(description = "")
  public Boolean isCreateFolder() {
    return createFolder;
  }

  public void setCreateFolder(Boolean createFolder) {
    this.createFolder = createFolder;
  }

  public CallbackSettings1Triggers rename(Boolean rename) {
    this.rename = rename;
    return this;
  }

   /**
   * Get rename
   * @return rename
  **/
  @Schema(description = "")
  public Boolean isRename() {
    return rename;
  }

  public void setRename(Boolean rename) {
    this.rename = rename;
  }

  public CallbackSettings1Triggers move(Boolean move) {
    this.move = move;
    return this;
  }

   /**
   * Get move
   * @return move
  **/
  @Schema(description = "")
  public Boolean isMove() {
    return move;
  }

  public void setMove(Boolean move) {
    this.move = move;
  }

  public CallbackSettings1Triggers copy(Boolean copy) {
    this.copy = copy;
    return this;
  }

   /**
   * Get copy
   * @return copy
  **/
  @Schema(description = "")
  public Boolean isCopy() {
    return copy;
  }

  public void setCopy(Boolean copy) {
    this.copy = copy;
  }

  public CallbackSettings1Triggers compress(Boolean compress) {
    this.compress = compress;
    return this;
  }

   /**
   * Get compress
   * @return compress
  **/
  @Schema(description = "")
  public Boolean isCompress() {
    return compress;
  }

  public void setCompress(Boolean compress) {
    this.compress = compress;
  }

  public CallbackSettings1Triggers extract(Boolean extract) {
    this.extract = extract;
    return this;
  }

   /**
   * Get extract
   * @return extract
  **/
  @Schema(description = "")
  public Boolean isExtract() {
    return extract;
  }

  public void setExtract(Boolean extract) {
    this.extract = extract;
  }

  public CallbackSettings1Triggers shareFolder(Boolean shareFolder) {
    this.shareFolder = shareFolder;
    return this;
  }

   /**
   * Get shareFolder
   * @return shareFolder
  **/
  @Schema(description = "")
  public Boolean isShareFolder() {
    return shareFolder;
  }

  public void setShareFolder(Boolean shareFolder) {
    this.shareFolder = shareFolder;
  }

  public CallbackSettings1Triggers sendFiles(Boolean sendFiles) {
    this.sendFiles = sendFiles;
    return this;
  }

   /**
   * Get sendFiles
   * @return sendFiles
  **/
  @Schema(description = "")
  public Boolean isSendFiles() {
    return sendFiles;
  }

  public void setSendFiles(Boolean sendFiles) {
    this.sendFiles = sendFiles;
  }

  public CallbackSettings1Triggers receiveFiles(Boolean receiveFiles) {
    this.receiveFiles = receiveFiles;
    return this;
  }

   /**
   * Get receiveFiles
   * @return receiveFiles
  **/
  @Schema(description = "")
  public Boolean isReceiveFiles() {
    return receiveFiles;
  }

  public void setReceiveFiles(Boolean receiveFiles) {
    this.receiveFiles = receiveFiles;
  }

  public CallbackSettings1Triggers updateShare(Boolean updateShare) {
    this.updateShare = updateShare;
    return this;
  }

   /**
   * Get updateShare
   * @return updateShare
  **/
  @Schema(description = "")
  public Boolean isUpdateShare() {
    return updateShare;
  }

  public void setUpdateShare(Boolean updateShare) {
    this.updateShare = updateShare;
  }

  public CallbackSettings1Triggers updateReceive(Boolean updateReceive) {
    this.updateReceive = updateReceive;
    return this;
  }

   /**
   * Get updateReceive
   * @return updateReceive
  **/
  @Schema(description = "")
  public Boolean isUpdateReceive() {
    return updateReceive;
  }

  public void setUpdateReceive(Boolean updateReceive) {
    this.updateReceive = updateReceive;
  }

  public CallbackSettings1Triggers deleteSend(Boolean deleteSend) {
    this.deleteSend = deleteSend;
    return this;
  }

   /**
   * Get deleteSend
   * @return deleteSend
  **/
  @Schema(description = "")
  public Boolean isDeleteSend() {
    return deleteSend;
  }

  public void setDeleteSend(Boolean deleteSend) {
    this.deleteSend = deleteSend;
  }

  public CallbackSettings1Triggers deleteReceive(Boolean deleteReceive) {
    this.deleteReceive = deleteReceive;
    return this;
  }

   /**
   * Get deleteReceive
   * @return deleteReceive
  **/
  @Schema(description = "")
  public Boolean isDeleteReceive() {
    return deleteReceive;
  }

  public void setDeleteReceive(Boolean deleteReceive) {
    this.deleteReceive = deleteReceive;
  }

  public CallbackSettings1Triggers deleteShare(Boolean deleteShare) {
    this.deleteShare = deleteShare;
    return this;
  }

   /**
   * Get deleteShare
   * @return deleteShare
  **/
  @Schema(description = "")
  public Boolean isDeleteShare() {
    return deleteShare;
  }

  public void setDeleteShare(Boolean deleteShare) {
    this.deleteShare = deleteShare;
  }

  public CallbackSettings1Triggers createNotification(Boolean createNotification) {
    this.createNotification = createNotification;
    return this;
  }

   /**
   * Get createNotification
   * @return createNotification
  **/
  @Schema(description = "")
  public Boolean isCreateNotification() {
    return createNotification;
  }

  public void setCreateNotification(Boolean createNotification) {
    this.createNotification = createNotification;
  }

  public CallbackSettings1Triggers updateNotification(Boolean updateNotification) {
    this.updateNotification = updateNotification;
    return this;
  }

   /**
   * Get updateNotification
   * @return updateNotification
  **/
  @Schema(description = "")
  public Boolean isUpdateNotification() {
    return updateNotification;
  }

  public void setUpdateNotification(Boolean updateNotification) {
    this.updateNotification = updateNotification;
  }

  public CallbackSettings1Triggers deleteNotification(Boolean deleteNotification) {
    this.deleteNotification = deleteNotification;
    return this;
  }

   /**
   * Get deleteNotification
   * @return deleteNotification
  **/
  @Schema(description = "")
  public Boolean isDeleteNotification() {
    return deleteNotification;
  }

  public void setDeleteNotification(Boolean deleteNotification) {
    this.deleteNotification = deleteNotification;
  }

  public CallbackSettings1Triggers createUser(Boolean createUser) {
    this.createUser = createUser;
    return this;
  }

   /**
   * Get createUser
   * @return createUser
  **/
  @Schema(description = "")
  public Boolean isCreateUser() {
    return createUser;
  }

  public void setCreateUser(Boolean createUser) {
    this.createUser = createUser;
  }

  public CallbackSettings1Triggers updateUser(Boolean updateUser) {
    this.updateUser = updateUser;
    return this;
  }

   /**
   * Get updateUser
   * @return updateUser
  **/
  @Schema(description = "")
  public Boolean isUpdateUser() {
    return updateUser;
  }

  public void setUpdateUser(Boolean updateUser) {
    this.updateUser = updateUser;
  }

  public CallbackSettings1Triggers deleteUser(Boolean deleteUser) {
    this.deleteUser = deleteUser;
    return this;
  }

   /**
   * Get deleteUser
   * @return deleteUser
  **/
  @Schema(description = "")
  public Boolean isDeleteUser() {
    return deleteUser;
  }

  public void setDeleteUser(Boolean deleteUser) {
    this.deleteUser = deleteUser;
  }

  public CallbackSettings1Triggers userConnect(Boolean userConnect) {
    this.userConnect = userConnect;
    return this;
  }

   /**
   * Get userConnect
   * @return userConnect
  **/
  @Schema(description = "")
  public Boolean isUserConnect() {
    return userConnect;
  }

  public void setUserConnect(Boolean userConnect) {
    this.userConnect = userConnect;
  }

  public CallbackSettings1Triggers userDisconnect(Boolean userDisconnect) {
    this.userDisconnect = userDisconnect;
    return this;
  }

   /**
   * Get userDisconnect
   * @return userDisconnect
  **/
  @Schema(description = "")
  public Boolean isUserDisconnect() {
    return userDisconnect;
  }

  public void setUserDisconnect(Boolean userDisconnect) {
    this.userDisconnect = userDisconnect;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallbackSettings1Triggers callbackSettings1Triggers = (CallbackSettings1Triggers) o;
    return Objects.equals(this.download, callbackSettings1Triggers.download) &&
        Objects.equals(this.upload, callbackSettings1Triggers.upload) &&
        Objects.equals(this.delete, callbackSettings1Triggers.delete) &&
        Objects.equals(this.createFolder, callbackSettings1Triggers.createFolder) &&
        Objects.equals(this.rename, callbackSettings1Triggers.rename) &&
        Objects.equals(this.move, callbackSettings1Triggers.move) &&
        Objects.equals(this.copy, callbackSettings1Triggers.copy) &&
        Objects.equals(this.compress, callbackSettings1Triggers.compress) &&
        Objects.equals(this.extract, callbackSettings1Triggers.extract) &&
        Objects.equals(this.shareFolder, callbackSettings1Triggers.shareFolder) &&
        Objects.equals(this.sendFiles, callbackSettings1Triggers.sendFiles) &&
        Objects.equals(this.receiveFiles, callbackSettings1Triggers.receiveFiles) &&
        Objects.equals(this.updateShare, callbackSettings1Triggers.updateShare) &&
        Objects.equals(this.updateReceive, callbackSettings1Triggers.updateReceive) &&
        Objects.equals(this.deleteSend, callbackSettings1Triggers.deleteSend) &&
        Objects.equals(this.deleteReceive, callbackSettings1Triggers.deleteReceive) &&
        Objects.equals(this.deleteShare, callbackSettings1Triggers.deleteShare) &&
        Objects.equals(this.createNotification, callbackSettings1Triggers.createNotification) &&
        Objects.equals(this.updateNotification, callbackSettings1Triggers.updateNotification) &&
        Objects.equals(this.deleteNotification, callbackSettings1Triggers.deleteNotification) &&
        Objects.equals(this.createUser, callbackSettings1Triggers.createUser) &&
        Objects.equals(this.updateUser, callbackSettings1Triggers.updateUser) &&
        Objects.equals(this.deleteUser, callbackSettings1Triggers.deleteUser) &&
        Objects.equals(this.userConnect, callbackSettings1Triggers.userConnect) &&
        Objects.equals(this.userDisconnect, callbackSettings1Triggers.userDisconnect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(download, upload, delete, createFolder, rename, move, copy, compress, extract, shareFolder, sendFiles, receiveFiles, updateShare, updateReceive, deleteSend, deleteReceive, deleteShare, createNotification, updateNotification, deleteNotification, createUser, updateUser, deleteUser, userConnect, userDisconnect);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallbackSettings1Triggers {\n");
    
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    createFolder: ").append(toIndentedString(createFolder)).append("\n");
    sb.append("    rename: ").append(toIndentedString(rename)).append("\n");
    sb.append("    move: ").append(toIndentedString(move)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    extract: ").append(toIndentedString(extract)).append("\n");
    sb.append("    shareFolder: ").append(toIndentedString(shareFolder)).append("\n");
    sb.append("    sendFiles: ").append(toIndentedString(sendFiles)).append("\n");
    sb.append("    receiveFiles: ").append(toIndentedString(receiveFiles)).append("\n");
    sb.append("    updateShare: ").append(toIndentedString(updateShare)).append("\n");
    sb.append("    updateReceive: ").append(toIndentedString(updateReceive)).append("\n");
    sb.append("    deleteSend: ").append(toIndentedString(deleteSend)).append("\n");
    sb.append("    deleteReceive: ").append(toIndentedString(deleteReceive)).append("\n");
    sb.append("    deleteShare: ").append(toIndentedString(deleteShare)).append("\n");
    sb.append("    createNotification: ").append(toIndentedString(createNotification)).append("\n");
    sb.append("    updateNotification: ").append(toIndentedString(updateNotification)).append("\n");
    sb.append("    deleteNotification: ").append(toIndentedString(deleteNotification)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    updateUser: ").append(toIndentedString(updateUser)).append("\n");
    sb.append("    deleteUser: ").append(toIndentedString(deleteUser)).append("\n");
    sb.append("    userConnect: ").append(toIndentedString(userConnect)).append("\n");
    sb.append("    userDisconnect: ").append(toIndentedString(userDisconnect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

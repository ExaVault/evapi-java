/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PreviewFileAttributes
 */


public class PreviewFileAttributes {
  @SerializedName("image")
  private String image = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("imageHash")
  private String imageHash = null;

  @SerializedName("pageCount")
  private Integer pageCount = null;

  public PreviewFileAttributes image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Binary image content, base64 encoded.
   * @return image
  **/
  @Schema(example = "iVBORw0KGgoAAAANSUhEUgAAACIAAAAoCAYAAACb3CikAAAABGdBTUEAALGPC", description = "Binary image content, base64 encoded.")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public PreviewFileAttributes size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Size of the image in bytes.
   * @return size
  **/
  @Schema(example = "2186", description = "Size of the image in bytes.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public PreviewFileAttributes imageHash(String imageHash) {
    this.imageHash = imageHash;
    return this;
  }

   /**
   * hash of the image.
   * @return imageHash
  **/
  @Schema(example = "6afaa3ef4056dc602ccfc69ab52d6f40", description = "hash of the image.")
  public String getImageHash() {
    return imageHash;
  }

  public void setImageHash(String imageHash) {
    this.imageHash = imageHash;
  }

  public PreviewFileAttributes pageCount(Integer pageCount) {
    this.pageCount = pageCount;
    return this;
  }

   /**
   * Amount of pages available in the file. Used only for multipage documents.
   * @return pageCount
  **/
  @Schema(example = "10", description = "Amount of pages available in the file. Used only for multipage documents.")
  public Integer getPageCount() {
    return pageCount;
  }

  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreviewFileAttributes previewFileAttributes = (PreviewFileAttributes) o;
    return Objects.equals(this.image, previewFileAttributes.image) &&
        Objects.equals(this.size, previewFileAttributes.size) &&
        Objects.equals(this.imageHash, previewFileAttributes.imageHash) &&
        Objects.equals(this.pageCount, previewFileAttributes.pageCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, size, imageHash, pageCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreviewFileAttributes {\n");
    
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    imageHash: ").append(toIndentedString(imageHash)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.exavault.client.model.NotificationRecipient;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Attributes for the notification including the path, recipients, and share data. 
 */
@Schema(description = "Attributes for the notification including the path, recipients, and share data. ")

public class NotificationAttributes {
  @SerializedName("userId")
  private String userId = null;

  /**
   * Type of the resource the notification is attached to. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FILE("file"),
    FOLDER("folder"),
    SHARED_FOLDER("shared_folder"),
    SEND_RECEIPT("send_receipt"),
    SHARE_RECEIPT("share_receipt"),
    FILE_DROP("file_drop");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Action that triggers notification.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    UPLOAD("upload"),
    DOWNLOAD("download"),
    DELETE("delete"),
    ALL("all");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("usernames")
  private List<String> usernames = null;

  @SerializedName("recipients")
  private List<NotificationRecipient> recipients = null;

  @SerializedName("sendEmail")
  private Boolean sendEmail = null;

  @SerializedName("readableDescription")
  private String readableDescription = null;

  @SerializedName("readableDescriptionWithoutPath")
  private String readableDescriptionWithoutPath = null;

  @SerializedName("shareId")
  private String shareId = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("modified")
  private OffsetDateTime modified = null;

  public NotificationAttributes userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * ID of the user that the notification belongs to.
   * @return userId
  **/
  @Schema(example = "2", description = "ID of the user that the notification belongs to.")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public NotificationAttributes type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the resource the notification is attached to. 
   * @return type
  **/
  @Schema(example = "folder", description = "Type of the resource the notification is attached to. ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public NotificationAttributes path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path to the item that the notification is set on.
   * @return path
  **/
  @Schema(example = "/examplefolder", description = "Path to the item that the notification is set on.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public NotificationAttributes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the item that the notification is set on.
   * @return name
  **/
  @Schema(example = "examplefolder", description = "Name of the item that the notification is set on.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NotificationAttributes action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * Action that triggers notification.
   * @return action
  **/
  @Schema(example = "all", description = "Action that triggers notification.")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public NotificationAttributes usernames(List<String> usernames) {
    this.usernames = usernames;
    return this;
  }

  public NotificationAttributes addUsernamesItem(String usernamesItem) {
    if (this.usernames == null) {
      this.usernames = new ArrayList<String>();
    }
    this.usernames.add(usernamesItem);
    return this;
  }

   /**
   * Detail on which users can trigger the notification.
   * @return usernames
  **/
  @Schema(example = "[\"notice_user_all\"]", description = "Detail on which users can trigger the notification.")
  public List<String> getUsernames() {
    return usernames;
  }

  public void setUsernames(List<String> usernames) {
    this.usernames = usernames;
  }

  public NotificationAttributes recipients(List<NotificationRecipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public NotificationAttributes addRecipientsItem(NotificationRecipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<NotificationRecipient>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Notification recipients.
   * @return recipients
  **/
  @Schema(description = "Notification recipients.")
  public List<NotificationRecipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<NotificationRecipient> recipients) {
    this.recipients = recipients;
  }

  public NotificationAttributes sendEmail(Boolean sendEmail) {
    this.sendEmail = sendEmail;
    return this;
  }

   /**
   * Whether or not an email will send when the notification is triggered.
   * @return sendEmail
  **/
  @Schema(example = "true", description = "Whether or not an email will send when the notification is triggered.")
  public Boolean isSendEmail() {
    return sendEmail;
  }

  public void setSendEmail(Boolean sendEmail) {
    this.sendEmail = sendEmail;
  }

  public NotificationAttributes readableDescription(String readableDescription) {
    this.readableDescription = readableDescription;
    return this;
  }

   /**
   * Human readable description of the notification.
   * @return readableDescription
  **/
  @Schema(example = "anybody changes, downloads or deletes '/examplefile.jpg'", description = "Human readable description of the notification.")
  public String getReadableDescription() {
    return readableDescription;
  }

  public void setReadableDescription(String readableDescription) {
    this.readableDescription = readableDescription;
  }

  public NotificationAttributes readableDescriptionWithoutPath(String readableDescriptionWithoutPath) {
    this.readableDescriptionWithoutPath = readableDescriptionWithoutPath;
    return this;
  }

   /**
   * Human readable description of the notification without item path.
   * @return readableDescriptionWithoutPath
  **/
  @Schema(example = "anybody changes or downloads this file", description = "Human readable description of the notification without item path.")
  public String getReadableDescriptionWithoutPath() {
    return readableDescriptionWithoutPath;
  }

  public void setReadableDescriptionWithoutPath(String readableDescriptionWithoutPath) {
    this.readableDescriptionWithoutPath = readableDescriptionWithoutPath;
  }

  public NotificationAttributes shareId(String shareId) {
    this.shareId = shareId;
    return this;
  }

   /**
   * ID of the share that the notification belogns to.
   * @return shareId
  **/
  @Schema(description = "ID of the share that the notification belogns to.")
  public String getShareId() {
    return shareId;
  }

  public void setShareId(String shareId) {
    this.shareId = shareId;
  }

  public NotificationAttributes message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Custom message that will be sent to the notification recipients.
   * @return message
  **/
  @Schema(description = "Custom message that will be sent to the notification recipients.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public NotificationAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Timestamp of notifiction creation.
   * @return created
  **/
  @Schema(example = "2011-03-21T00:18:56Z", description = "Timestamp of notifiction creation.")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public NotificationAttributes modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Timestamp of notification modification.
   * @return modified
  **/
  @Schema(example = "2011-03-21T00:18:56Z", description = "Timestamp of notification modification.")
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationAttributes notificationAttributes = (NotificationAttributes) o;
    return Objects.equals(this.userId, notificationAttributes.userId) &&
        Objects.equals(this.type, notificationAttributes.type) &&
        Objects.equals(this.path, notificationAttributes.path) &&
        Objects.equals(this.name, notificationAttributes.name) &&
        Objects.equals(this.action, notificationAttributes.action) &&
        Objects.equals(this.usernames, notificationAttributes.usernames) &&
        Objects.equals(this.recipients, notificationAttributes.recipients) &&
        Objects.equals(this.sendEmail, notificationAttributes.sendEmail) &&
        Objects.equals(this.readableDescription, notificationAttributes.readableDescription) &&
        Objects.equals(this.readableDescriptionWithoutPath, notificationAttributes.readableDescriptionWithoutPath) &&
        Objects.equals(this.shareId, notificationAttributes.shareId) &&
        Objects.equals(this.message, notificationAttributes.message) &&
        Objects.equals(this.created, notificationAttributes.created) &&
        Objects.equals(this.modified, notificationAttributes.modified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, type, path, name, action, usernames, recipients, sendEmail, readableDescription, readableDescriptionWithoutPath, shareId, message, created, modified);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationAttributes {\n");
    
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    usernames: ").append(toIndentedString(usernames)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    sendEmail: ").append(toIndentedString(sendEmail)).append("\n");
    sb.append("    readableDescription: ").append(toIndentedString(readableDescription)).append("\n");
    sb.append("    readableDescriptionWithoutPath: ").append(toIndentedString(readableDescriptionWithoutPath)).append("\n");
    sb.append("    shareId: ").append(toIndentedString(shareId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

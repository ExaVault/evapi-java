/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.exavault.client.model.SharesRecipients;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Body17
 */


public class Body17 {
  @SerializedName("name")
  private String name = null;

  @SerializedName("resources")
  private List<String> resources = null;

  @SerializedName("accessMode")
  private List<String> accessMode = null;

  @SerializedName("embed")
  private Boolean embed = null;

  @SerializedName("recipients")
  private List<SharesRecipients> recipients = null;

  @SerializedName("expiration")
  private OffsetDateTime expiration = null;

  @SerializedName("hasNotification")
  private Boolean hasNotification = null;

  @SerializedName("isPublic")
  private Boolean isPublic = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("notificationEmails")
  private List<String> notificationEmails = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("requireEmail")
  private Boolean requireEmail = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("fileDropCreateFolders")
  private Boolean fileDropCreateFolders = null;

  @SerializedName("status")
  private Integer status = null;

  public Body17 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the share.
   * @return name
  **/
  @Schema(example = "Shared Folder", description = "Name of the share.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Body17 resources(List<String> resources) {
    this.resources = resources;
    return this;
  }

  public Body17 addResourcesItem(String resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<String>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one &#x60;resource&#x60;, which is a directory that does not have a current share attached.  **send** shares may have multiple &#x60;resource&#x60; parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
   * @return resources
  **/
  @Schema(example = "[\"/testfolder\"]", description = "Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.")
  public List<String> getResources() {
    return resources;
  }

  public void setResources(List<String> resources) {
    this.resources = resources;
  }

  public Body17 accessMode(List<String> accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  public Body17 addAccessModeItem(String accessModeItem) {
    if (this.accessMode == null) {
      this.accessMode = new ArrayList<String>();
    }
    this.accessMode.add(accessModeItem);
    return this;
  }

   /**
   * What visitors who view this share can do. Valid options include **download**, **upload**, **delete**, **modify**
   * @return accessMode
  **/
  @Schema(example = "[\"download\",\"upload\"]", description = "What visitors who view this share can do. Valid options include **download**, **upload**, **delete**, **modify**")
  public List<String> getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(List<String> accessMode) {
    this.accessMode = accessMode;
  }

  public Body17 embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

   /**
   * Whether the share can be embedded in another web page.
   * @return embed
  **/
  @Schema(example = "false", description = "Whether the share can be embedded in another web page.")
  public Boolean isEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }

  public Body17 recipients(List<SharesRecipients> recipients) {
    this.recipients = recipients;
    return this;
  }

  public Body17 addRecipientsItem(SharesRecipients recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<SharesRecipients>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * People you want to invite to the share.   **Note**: unless you also set the &#x60;subject&#x60; and &#x60;message&#x60; for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. 
   * @return recipients
  **/
  @Schema(description = "People you want to invite to the share.   **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. ")
  public List<SharesRecipients> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<SharesRecipients> recipients) {
    this.recipients = recipients;
  }

  public Body17 expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * New expiration date and time for the share
   * @return expiration
  **/
  @Schema(example = "2017-09-25T14:12:10Z", description = "New expiration date and time for the share")
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }

  public Body17 hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

   /**
   * Whether delivery receipts should be sent for this share.
   * @return hasNotification
  **/
  @Schema(example = "false", description = "Whether delivery receipts should be sent for this share.")
  public Boolean isHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }

  public Body17 isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Whether people can visit the share without following a link from an invitation email
   * @return isPublic
  **/
  @Schema(example = "true", description = "Whether people can visit the share without following a link from an invitation email")
  public Boolean isIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }

  public Body17 message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Message content to use for emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;subject&#x60;
   * @return message
  **/
  @Schema(description = "Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public Body17 notificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
    return this;
  }

  public Body17 addNotificationEmailsItem(String notificationEmailsItem) {
    if (this.notificationEmails == null) {
      this.notificationEmails = new ArrayList<String>();
    }
    this.notificationEmails.add(notificationEmailsItem);
    return this;
  }

   /**
   * List of email addresses to send delivery receipts to. Ignored if &#x60;hasNotification&#x60; is false. 
   * @return notificationEmails
  **/
  @Schema(example = "[\"notify@example.com\",\"notify2@example.com\"]", description = "List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false. ")
  public List<String> getNotificationEmails() {
    return notificationEmails;
  }

  public void setNotificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
  }

  public Body17 password(String password) {
    this.password = password;
    return this;
  }

   /**
   * New password for the share. To leave the password unchanged, do not send this parameter.
   * @return password
  **/
  @Schema(description = "New password for the share. To leave the password unchanged, do not send this parameter.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Body17 requireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
    return this;
  }

   /**
   * Whether visitors to the share will be required to enter their email in order to access the share.
   * @return requireEmail
  **/
  @Schema(example = "false", description = "Whether visitors to the share will be required to enter their email in order to access the share.")
  public Boolean isRequireEmail() {
    return requireEmail;
  }

  public void setRequireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
  }

  public Body17 subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;message&#x60;
   * @return subject
  **/
  @Schema(example = "Invitation to a shared folder", description = "Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public Body17 fileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
    return this;
  }

   /**
   * Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)
   * @return fileDropCreateFolders
  **/
  @Schema(example = "false", description = "Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)")
  public Boolean isFileDropCreateFolders() {
    return fileDropCreateFolders;
  }

  public void setFileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
  }

  public Body17 status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * New status for the share. You can set an active share to inactive by setting the status to **0**
   * @return status
  **/
  @Schema(description = "New status for the share. You can set an active share to inactive by setting the status to **0**")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body17 body17 = (Body17) o;
    return Objects.equals(this.name, body17.name) &&
        Objects.equals(this.resources, body17.resources) &&
        Objects.equals(this.accessMode, body17.accessMode) &&
        Objects.equals(this.embed, body17.embed) &&
        Objects.equals(this.recipients, body17.recipients) &&
        Objects.equals(this.expiration, body17.expiration) &&
        Objects.equals(this.hasNotification, body17.hasNotification) &&
        Objects.equals(this.isPublic, body17.isPublic) &&
        Objects.equals(this.message, body17.message) &&
        Objects.equals(this.notificationEmails, body17.notificationEmails) &&
        Objects.equals(this.password, body17.password) &&
        Objects.equals(this.requireEmail, body17.requireEmail) &&
        Objects.equals(this.subject, body17.subject) &&
        Objects.equals(this.fileDropCreateFolders, body17.fileDropCreateFolders) &&
        Objects.equals(this.status, body17.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, resources, accessMode, embed, recipients, expiration, hasNotification, isPublic, message, notificationEmails, password, requireEmail, subject, fileDropCreateFolders, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body17 {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    notificationEmails: ").append(toIndentedString(notificationEmails)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    requireEmail: ").append(toIndentedString(requireEmail)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    fileDropCreateFolders: ").append(toIndentedString(fileDropCreateFolders)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

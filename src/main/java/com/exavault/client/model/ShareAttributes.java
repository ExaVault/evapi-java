/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.exavault.client.model.AccessMode;
import com.exavault.client.model.ShareMessage;
import com.exavault.client.model.ShareRecipient1;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Attributes of the share including the name, path and share recipients. 
 */
@Schema(description = "Attributes of the share including the name, path and share recipients. ")

public class ShareAttributes {
  @SerializedName("name")
  private String name = null;

  @SerializedName("hasPassword")
  private Boolean hasPassword = null;

  @SerializedName("public")
  private Boolean _public = null;

  @SerializedName("accessMode")
  private AccessMode accessMode = null;

  @SerializedName("accessDescription")
  private String accessDescription = null;

  @SerializedName("embed")
  private Boolean embed = null;

  @SerializedName("hash")
  private String hash = null;

  @SerializedName("ownerHash")
  private String ownerHash = null;

  @SerializedName("expiration")
  private String expiration = null;

  @SerializedName("expired")
  private Boolean expired = null;

  @SerializedName("resent")
  private OffsetDateTime resent = null;

  /**
   * Type of share.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SHARED_FOLDER("shared_folder"),
    SEND("send"),
    RECEIVE("receive");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("requireEmail")
  private Boolean requireEmail = null;

  @SerializedName("fileDropCreateFolders")
  private Boolean fileDropCreateFolders = null;

  @SerializedName("paths")
  private List<String> paths = null;

  @SerializedName("recipients")
  private List<ShareRecipient1> recipients = null;

  @SerializedName("messages")
  private List<ShareMessage> messages = null;

  @SerializedName("inherited")
  private Boolean inherited = null;

  /**
   * Share activity status. Can be active (1) or deactivated (0).
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    NUMBER_1(1);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("hasNotification")
  private Boolean hasNotification = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("modified")
  private OffsetDateTime modified = null;

  /**
   * Checks recipient received status and returns whether it&#x27;s been recevied (&#x60;complete&#x60;,) partial recevied (&#x60;incomplete&#x60;,) or not recevied yet (&#x60;pending&#x60;.)
   */
  @JsonAdapter(TrackingStatusEnum.Adapter.class)
  public enum TrackingStatusEnum {
    COMPLETE("complete"),
    INCOMPLETE("incomplete"),
    PENDING("pending");

    private String value;

    TrackingStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TrackingStatusEnum fromValue(String text) {
      for (TrackingStatusEnum b : TrackingStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TrackingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TrackingStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("trackingStatus")
  private TrackingStatusEnum trackingStatus = null;

  @SerializedName("formId")
  private Integer formId = null;

  public ShareAttributes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Share name.
   * @return name
  **/
  @Schema(example = "Example Folder", description = "Share name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ShareAttributes hasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
    return this;
  }

   /**
   * True if the share has password.
   * @return hasPassword
  **/
  @Schema(example = "false", description = "True if the share has password.")
  public Boolean isHasPassword() {
    return hasPassword;
  }

  public void setHasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
  }

  public ShareAttributes _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * True if the share has a public url.
   * @return _public
  **/
  @Schema(example = "true", description = "True if the share has a public url.")
  public Boolean isPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }

  public ShareAttributes accessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
    return this;
  }

   /**
   * Get accessMode
   * @return accessMode
  **/
  @Schema(description = "")
  public AccessMode getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
  }

  public ShareAttributes accessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
    return this;
  }

   /**
   * Description of the share access rights.
   * @return accessDescription
  **/
  @Schema(example = "Download only", description = "Description of the share access rights.")
  public String getAccessDescription() {
    return accessDescription;
  }

  public void setAccessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
  }

  public ShareAttributes embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

   /**
   * True if share can be embedded.
   * @return embed
  **/
  @Schema(example = "false", description = "True if share can be embedded.")
  public Boolean isEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }

  public ShareAttributes hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Share hash.
   * @return hash
  **/
  @Schema(example = "hd1e-3erufo72", description = "Share hash.")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public ShareAttributes ownerHash(String ownerHash) {
    this.ownerHash = ownerHash;
    return this;
  }

   /**
   * Share owner&#x27;s hash.
   * @return ownerHash
  **/
  @Schema(example = "hd1e-3erufo72-fsxak999", description = "Share owner's hash.")
  public String getOwnerHash() {
    return ownerHash;
  }

  public void setOwnerHash(String ownerHash) {
    this.ownerHash = ownerHash;
  }

  public ShareAttributes expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Expiration date of the share.
   * @return expiration
  **/
  @Schema(description = "Expiration date of the share.")
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public ShareAttributes expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

   /**
   * True if the share has expired.
   * @return expired
  **/
  @Schema(example = "false", description = "True if the share has expired.")
  public Boolean isExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }

  public ShareAttributes resent(OffsetDateTime resent) {
    this.resent = resent;
    return this;
  }

   /**
   * Invitations resent date. Can be &#x60;null&#x60; if resent never happened.
   * @return resent
  **/
  @Schema(description = "Invitations resent date. Can be `null` if resent never happened.")
  public OffsetDateTime getResent() {
    return resent;
  }

  public void setResent(OffsetDateTime resent) {
    this.resent = resent;
  }

  public ShareAttributes type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of share.
   * @return type
  **/
  @Schema(example = "shared_folder", description = "Type of share.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ShareAttributes requireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
    return this;
  }

   /**
   * True if share requires email to access.
   * @return requireEmail
  **/
  @Schema(example = "true", description = "True if share requires email to access.")
  public Boolean isRequireEmail() {
    return requireEmail;
  }

  public void setRequireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
  }

  public ShareAttributes fileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
    return this;
  }

   /**
   * Flag to show if separate folders should be created for each file upload to receive folder.
   * @return fileDropCreateFolders
  **/
  @Schema(example = "false", description = "Flag to show if separate folders should be created for each file upload to receive folder.")
  public Boolean isFileDropCreateFolders() {
    return fileDropCreateFolders;
  }

  public void setFileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
  }

  public ShareAttributes paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public ShareAttributes addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<String>();
    }
    this.paths.add(pathsItem);
    return this;
  }

   /**
   * Path to the shared resource in your account.
   * @return paths
  **/
  @Schema(example = "[\"/Example Folder\"]", description = "Path to the shared resource in your account.")
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }

  public ShareAttributes recipients(List<ShareRecipient1> recipients) {
    this.recipients = recipients;
    return this;
  }

  public ShareAttributes addRecipientsItem(ShareRecipient1 recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<ShareRecipient1>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Array of recipients.
   * @return recipients
  **/
  @Schema(example = "[{\"id\":2,\"shareId\":23,\"type\":\"direct\",\"hash\":\"fseowxan\",\"email\":\"recipient@gmail.com\",\"sent\":true,\"received\":false,\"created\":\"2017-04-21T10:53:47Z\"}]", description = "Array of recipients.")
  public List<ShareRecipient1> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<ShareRecipient1> recipients) {
    this.recipients = recipients;
  }

  public ShareAttributes messages(List<ShareMessage> messages) {
    this.messages = messages;
    return this;
  }

  public ShareAttributes addMessagesItem(ShareMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<ShareMessage>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Array of invitation messages.
   * @return messages
  **/
  @Schema(description = "Array of invitation messages.")
  public List<ShareMessage> getMessages() {
    return messages;
  }

  public void setMessages(List<ShareMessage> messages) {
    this.messages = messages;
  }

  public ShareAttributes inherited(Boolean inherited) {
    this.inherited = inherited;
    return this;
  }

   /**
   * True if share inherited from parent folder.
   * @return inherited
  **/
  @Schema(example = "false", description = "True if share inherited from parent folder.")
  public Boolean isInherited() {
    return inherited;
  }

  public void setInherited(Boolean inherited) {
    this.inherited = inherited;
  }

  public ShareAttributes status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Share activity status. Can be active (1) or deactivated (0).
   * @return status
  **/
  @Schema(example = "1", description = "Share activity status. Can be active (1) or deactivated (0).")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ShareAttributes hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

   /**
   * True if share has notification.
   * @return hasNotification
  **/
  @Schema(example = "false", description = "True if share has notification.")
  public Boolean isHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }

  public ShareAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Timestamp of share creation.
   * @return created
  **/
  @Schema(example = "2017-01-28T13:10:47Z", description = "Timestamp of share creation.")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public ShareAttributes modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Timestamp of share modification. Can be &#x60;null&#x60; if it wasn&#x27;t modified.
   * @return modified
  **/
  @Schema(description = "Timestamp of share modification. Can be `null` if it wasn't modified.")
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }

  public ShareAttributes trackingStatus(TrackingStatusEnum trackingStatus) {
    this.trackingStatus = trackingStatus;
    return this;
  }

   /**
   * Checks recipient received status and returns whether it&#x27;s been recevied (&#x60;complete&#x60;,) partial recevied (&#x60;incomplete&#x60;,) or not recevied yet (&#x60;pending&#x60;.)
   * @return trackingStatus
  **/
  @Schema(description = "Checks recipient received status and returns whether it's been recevied (`complete`,) partial recevied (`incomplete`,) or not recevied yet (`pending`.)")
  public TrackingStatusEnum getTrackingStatus() {
    return trackingStatus;
  }

  public void setTrackingStatus(TrackingStatusEnum trackingStatus) {
    this.trackingStatus = trackingStatus;
  }

  public ShareAttributes formId(Integer formId) {
    this.formId = formId;
    return this;
  }

   /**
   * ID of the form.
   * @return formId
  **/
  @Schema(description = "ID of the form.")
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(Integer formId) {
    this.formId = formId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareAttributes shareAttributes = (ShareAttributes) o;
    return Objects.equals(this.name, shareAttributes.name) &&
        Objects.equals(this.hasPassword, shareAttributes.hasPassword) &&
        Objects.equals(this._public, shareAttributes._public) &&
        Objects.equals(this.accessMode, shareAttributes.accessMode) &&
        Objects.equals(this.accessDescription, shareAttributes.accessDescription) &&
        Objects.equals(this.embed, shareAttributes.embed) &&
        Objects.equals(this.hash, shareAttributes.hash) &&
        Objects.equals(this.ownerHash, shareAttributes.ownerHash) &&
        Objects.equals(this.expiration, shareAttributes.expiration) &&
        Objects.equals(this.expired, shareAttributes.expired) &&
        Objects.equals(this.resent, shareAttributes.resent) &&
        Objects.equals(this.type, shareAttributes.type) &&
        Objects.equals(this.requireEmail, shareAttributes.requireEmail) &&
        Objects.equals(this.fileDropCreateFolders, shareAttributes.fileDropCreateFolders) &&
        Objects.equals(this.paths, shareAttributes.paths) &&
        Objects.equals(this.recipients, shareAttributes.recipients) &&
        Objects.equals(this.messages, shareAttributes.messages) &&
        Objects.equals(this.inherited, shareAttributes.inherited) &&
        Objects.equals(this.status, shareAttributes.status) &&
        Objects.equals(this.hasNotification, shareAttributes.hasNotification) &&
        Objects.equals(this.created, shareAttributes.created) &&
        Objects.equals(this.modified, shareAttributes.modified) &&
        Objects.equals(this.trackingStatus, shareAttributes.trackingStatus) &&
        Objects.equals(this.formId, shareAttributes.formId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, hasPassword, _public, accessMode, accessDescription, embed, hash, ownerHash, expiration, expired, resent, type, requireEmail, fileDropCreateFolders, paths, recipients, messages, inherited, status, hasNotification, created, modified, trackingStatus, formId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareAttributes {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    accessDescription: ").append(toIndentedString(accessDescription)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    ownerHash: ").append(toIndentedString(ownerHash)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    resent: ").append(toIndentedString(resent)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    requireEmail: ").append(toIndentedString(requireEmail)).append("\n");
    sb.append("    fileDropCreateFolders: ").append(toIndentedString(fileDropCreateFolders)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    trackingStatus: ").append(toIndentedString(trackingStatus)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

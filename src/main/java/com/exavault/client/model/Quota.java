/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Quota
 */


public class Quota {
  @SerializedName("diskLimit")
  private Long diskLimit = null;

  @SerializedName("diskUsed")
  private Long diskUsed = null;

  @SerializedName("noticeEnabled")
  private Boolean noticeEnabled = null;

  @SerializedName("noticeThreshold")
  private Integer noticeThreshold = null;

  @SerializedName("bandwidthLimit")
  private Long bandwidthLimit = null;

  @SerializedName("bandwidthUsed")
  private Long bandwidthUsed = null;

  @SerializedName("transactionsLimit")
  private Integer transactionsLimit = null;

  @SerializedName("transactionsNoticeEnabled")
  private Boolean transactionsNoticeEnabled = null;

  @SerializedName("transactionsNoticeThreshold")
  private Integer transactionsNoticeThreshold = null;

  public Quota diskLimit(Long diskLimit) {
    this.diskLimit = diskLimit;
    return this;
  }

   /**
   * Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.
   * @return diskLimit
  **/
  @Schema(example = "375809638400", description = "Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.")
  public Long getDiskLimit() {
    return diskLimit;
  }

  public void setDiskLimit(Long diskLimit) {
    this.diskLimit = diskLimit;
  }

  public Quota diskUsed(Long diskUsed) {
    this.diskUsed = diskUsed;
    return this;
  }

   /**
   * Amount of disk space currently in use.
   * @return diskUsed
  **/
  @Schema(example = "1225352192", description = "Amount of disk space currently in use.")
  public Long getDiskUsed() {
    return diskUsed;
  }

  public void setDiskUsed(Long diskUsed) {
    this.diskUsed = diskUsed;
  }

  public Quota noticeEnabled(Boolean noticeEnabled) {
    this.noticeEnabled = noticeEnabled;
    return this;
  }

   /**
   * Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?
   * @return noticeEnabled
  **/
  @Schema(example = "true", description = "Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?")
  public Boolean isNoticeEnabled() {
    return noticeEnabled;
  }

  public void setNoticeEnabled(Boolean noticeEnabled) {
    this.noticeEnabled = noticeEnabled;
  }

  public Quota noticeThreshold(Integer noticeThreshold) {
    this.noticeThreshold = noticeThreshold;
    return this;
  }

   /**
   * Treshold that triggers a quota notification. This represents the \&quot;percent full\&quot; your account must be before the quota notification is generated.
   * @return noticeThreshold
  **/
  @Schema(example = "80", description = "Treshold that triggers a quota notification. This represents the \"percent full\" your account must be before the quota notification is generated.")
  public Integer getNoticeThreshold() {
    return noticeThreshold;
  }

  public void setNoticeThreshold(Integer noticeThreshold) {
    this.noticeThreshold = noticeThreshold;
  }

  public Quota bandwidthLimit(Long bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

   /**
   * Total number of bytes that can be transferred per month.
   * @return bandwidthLimit
  **/
  @Schema(description = "Total number of bytes that can be transferred per month.")
  public Long getBandwidthLimit() {
    return bandwidthLimit;
  }

  public void setBandwidthLimit(Long bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }

  public Quota bandwidthUsed(Long bandwidthUsed) {
    this.bandwidthUsed = bandwidthUsed;
    return this;
  }

   /**
   * Number of bytes transferred this month.
   * @return bandwidthUsed
  **/
  @Schema(description = "Number of bytes transferred this month.")
  public Long getBandwidthUsed() {
    return bandwidthUsed;
  }

  public void setBandwidthUsed(Long bandwidthUsed) {
    this.bandwidthUsed = bandwidthUsed;
  }

  public Quota transactionsLimit(Integer transactionsLimit) {
    this.transactionsLimit = transactionsLimit;
    return this;
  }

   /**
   * Total number of transactions allowed in a 24-hour period.
   * @return transactionsLimit
  **/
  @Schema(description = "Total number of transactions allowed in a 24-hour period.")
  public Integer getTransactionsLimit() {
    return transactionsLimit;
  }

  public void setTransactionsLimit(Integer transactionsLimit) {
    this.transactionsLimit = transactionsLimit;
  }

  public Quota transactionsNoticeEnabled(Boolean transactionsNoticeEnabled) {
    this.transactionsNoticeEnabled = transactionsNoticeEnabled;
    return this;
  }

   /**
   * Whether an email should be sent to the account owner up to once per day if transaction usage exceeds &#x60;transactionsNoticeThreshold&#x60; value.
   * @return transactionsNoticeEnabled
  **/
  @Schema(description = "Whether an email should be sent to the account owner up to once per day if transaction usage exceeds `transactionsNoticeThreshold` value.")
  public Boolean isTransactionsNoticeEnabled() {
    return transactionsNoticeEnabled;
  }

  public void setTransactionsNoticeEnabled(Boolean transactionsNoticeEnabled) {
    this.transactionsNoticeEnabled = transactionsNoticeEnabled;
  }

  public Quota transactionsNoticeThreshold(Integer transactionsNoticeThreshold) {
    this.transactionsNoticeThreshold = transactionsNoticeThreshold;
    return this;
  }

   /**
   * Percent of daily transactions limit that will trigger an email if activity exceeds it.
   * @return transactionsNoticeThreshold
  **/
  @Schema(description = "Percent of daily transactions limit that will trigger an email if activity exceeds it.")
  public Integer getTransactionsNoticeThreshold() {
    return transactionsNoticeThreshold;
  }

  public void setTransactionsNoticeThreshold(Integer transactionsNoticeThreshold) {
    this.transactionsNoticeThreshold = transactionsNoticeThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quota quota = (Quota) o;
    return Objects.equals(this.diskLimit, quota.diskLimit) &&
        Objects.equals(this.diskUsed, quota.diskUsed) &&
        Objects.equals(this.noticeEnabled, quota.noticeEnabled) &&
        Objects.equals(this.noticeThreshold, quota.noticeThreshold) &&
        Objects.equals(this.bandwidthLimit, quota.bandwidthLimit) &&
        Objects.equals(this.bandwidthUsed, quota.bandwidthUsed) &&
        Objects.equals(this.transactionsLimit, quota.transactionsLimit) &&
        Objects.equals(this.transactionsNoticeEnabled, quota.transactionsNoticeEnabled) &&
        Objects.equals(this.transactionsNoticeThreshold, quota.transactionsNoticeThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskLimit, diskUsed, noticeEnabled, noticeThreshold, bandwidthLimit, bandwidthUsed, transactionsLimit, transactionsNoticeEnabled, transactionsNoticeThreshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quota {\n");
    
    sb.append("    diskLimit: ").append(toIndentedString(diskLimit)).append("\n");
    sb.append("    diskUsed: ").append(toIndentedString(diskUsed)).append("\n");
    sb.append("    noticeEnabled: ").append(toIndentedString(noticeEnabled)).append("\n");
    sb.append("    noticeThreshold: ").append(toIndentedString(noticeThreshold)).append("\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    bandwidthUsed: ").append(toIndentedString(bandwidthUsed)).append("\n");
    sb.append("    transactionsLimit: ").append(toIndentedString(transactionsLimit)).append("\n");
    sb.append("    transactionsNoticeEnabled: ").append(toIndentedString(transactionsNoticeEnabled)).append("\n");
    sb.append("    transactionsNoticeThreshold: ").append(toIndentedString(transactionsNoticeThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.exavault.client.model.FormField;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Attributes of the form including it&#x27;s included fields and css styles
 */
@Schema(description = "Attributes of the form including it's included fields and css styles")

public class FormAttributes {
  @SerializedName("formDescription")
  private String formDescription = null;

  @SerializedName("submitButtonText")
  private String submitButtonText = null;

  @SerializedName("successMessage")
  private String successMessage = null;

  @SerializedName("cssStyles")
  private String cssStyles = null;

  @SerializedName("elements")
  private List<FormField> elements = null;

  public FormAttributes formDescription(String formDescription) {
    this.formDescription = formDescription;
    return this;
  }

   /**
   * Text that appears at the top of a receive form
   * @return formDescription
  **/
  @Schema(example = "Upload your photos to us", description = "Text that appears at the top of a receive form")
  public String getFormDescription() {
    return formDescription;
  }

  public void setFormDescription(String formDescription) {
    this.formDescription = formDescription;
  }

  public FormAttributes submitButtonText(String submitButtonText) {
    this.submitButtonText = submitButtonText;
    return this;
  }

   /**
   * Text that appears on the submit button for the form
   * @return submitButtonText
  **/
  @Schema(example = "Send Files", description = "Text that appears on the submit button for the form")
  public String getSubmitButtonText() {
    return submitButtonText;
  }

  public void setSubmitButtonText(String submitButtonText) {
    this.submitButtonText = submitButtonText;
  }

  public FormAttributes successMessage(String successMessage) {
    this.successMessage = successMessage;
    return this;
  }

   /**
   * Message displayed to submitter after files are uploaded
   * @return successMessage
  **/
  @Schema(example = "Your files were uploaded", description = "Message displayed to submitter after files are uploaded")
  public String getSuccessMessage() {
    return successMessage;
  }

  public void setSuccessMessage(String successMessage) {
    this.successMessage = successMessage;
  }

  public FormAttributes cssStyles(String cssStyles) {
    this.cssStyles = cssStyles;
    return this;
  }

   /**
   * CSS Styles of the form.
   * @return cssStyles
  **/
  @Schema(example = "#ev-widget-form {   /_*Change this to change the font. Remove to use your website font*_/   font-family: Helvetica Neue, sans-serif;   /_*Makes the form the same width as your website *_/   margin: 0 -2%; } #ev-widget-form label{   width: 100%; } #ev-widget-form input, #ev-widget-form textarea {   /_*Changes color and thickness of borders on form elements *_/   border: 2px solid #ccc;   /_*Changes spacing inside the form elements (top/bottom and left/right *_/   padding: 5px 5px;   /_* Changes how far away the inputs are from their label *_/   margin-top: 2px; }  #ev-widget-form input:focus, #ev-widget-form textarea:focus {   /_*Changes the color of the form elements when they are clicked in to *_/   border: 2px solid #b2cf88;   /_*Removes glow effect from form elements that are clicked in to *_/   outline: none; }  #ev-widget-form label {   font-size: 14px;   font-weight: bold;   /_*Changes color of labels *_/   color: #232323 }  #ev-widget-form .ev-form-element-description {   /_*Changes size of descriptions *_/   font-size: 12px;   /_*Changes color of descriptions *_/   color: #777;   /_* Changes how far away the descriptions are from their input *_/   margin-top: 2px; }  #ev-widget-form textarea {   /_* Makes textareas (multiline inputs) a taller. *_/   min-height: 90px; }", description = "CSS Styles of the form.")
  public String getCssStyles() {
    return cssStyles;
  }

  public void setCssStyles(String cssStyles) {
    this.cssStyles = cssStyles;
  }

  public FormAttributes elements(List<FormField> elements) {
    this.elements = elements;
    return this;
  }

  public FormAttributes addElementsItem(FormField elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<FormField>();
    }
    this.elements.add(elementsItem);
    return this;
  }

   /**
   * Array of form fields defined for the form
   * @return elements
  **/
  @Schema(example = "[{\"id\":234,\"name\":\"Project ID\",\"order\":0,\"type\":\"name\",\"settings\":{\"description\":null,\"width\":1,\"isRequired\":false,\"useAsFolderName\":false}},{\"id\":235,\"name\":\"Your Email\",\"order\":1,\"type\":\"email\",\"setings\":{\"description\":\"Enter your email from the registration system\",\"width\":1,\"isRequired\":true,\"senderEmail\":true,\"useAsFolderName\":true}},{\"id\":236,\"name\":\"Upload Area\",\"order\":2,\"type\":\"upload_area\",\"settings\":{\"fileTypes\":null}}]", description = "Array of form fields defined for the form")
  public List<FormField> getElements() {
    return elements;
  }

  public void setElements(List<FormField> elements) {
    this.elements = elements;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormAttributes formAttributes = (FormAttributes) o;
    return Objects.equals(this.formDescription, formAttributes.formDescription) &&
        Objects.equals(this.submitButtonText, formAttributes.submitButtonText) &&
        Objects.equals(this.successMessage, formAttributes.successMessage) &&
        Objects.equals(this.cssStyles, formAttributes.cssStyles) &&
        Objects.equals(this.elements, formAttributes.elements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formDescription, submitButtonText, successMessage, cssStyles, elements);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormAttributes {\n");
    
    sb.append("    formDescription: ").append(toIndentedString(formDescription)).append("\n");
    sb.append("    submitButtonText: ").append(toIndentedString(submitButtonText)).append("\n");
    sb.append("    successMessage: ").append(toIndentedString(successMessage)).append("\n");
    sb.append("    cssStyles: ").append(toIndentedString(cssStyles)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

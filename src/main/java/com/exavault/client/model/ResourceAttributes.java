/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Attributes of resource
 */
@Schema(description = "Attributes of resource")

public class ResourceAttributes {
  @SerializedName("hash")
  private String hash = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("extension")
  private String extension = null;

  /**
   * Type of the resource.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FILE("file"),
    DIR("dir");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("createdBy")
  private String createdBy = null;

  @SerializedName("uploadDate")
  private OffsetDateTime uploadDate = null;

  @SerializedName("createdAt")
  private OffsetDateTime createdAt = null;

  @SerializedName("updatedAt")
  private OffsetDateTime updatedAt = null;

  @SerializedName("accessedAt")
  private OffsetDateTime accessedAt = null;

  @SerializedName("createdTime")
  private Integer createdTime = null;

  @SerializedName("updatedTime")
  private Integer updatedTime = null;

  @SerializedName("accessedTime")
  private Integer accessedTime = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("fileCount")
  private Integer fileCount = null;

  @SerializedName("previewable")
  private Boolean previewable = null;

  public ResourceAttributes hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Unique hash of the resource.
   * @return hash
  **/
  @Schema(example = "ec4aa9a91be282666a165899a14f29b1", description = "Unique hash of the resource.")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public ResourceAttributes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Resource name, e.g. the name of the file or folder.
   * @return name
  **/
  @Schema(example = "examplefolder", description = "Resource name, e.g. the name of the file or folder.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ResourceAttributes extension(String extension) {
    this.extension = extension;
    return this;
  }

   /**
   * Resource extension. Property exists only if resource &#x60;type&#x60; is file.
   * @return extension
  **/
  @Schema(description = "Resource extension. Property exists only if resource `type` is file.")
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }

  public ResourceAttributes type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the resource.
   * @return type
  **/
  @Schema(description = "Type of the resource.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ResourceAttributes createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Username of the creator.
   * @return createdBy
  **/
  @Schema(example = "exampleuser", description = "Username of the creator.")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public ResourceAttributes uploadDate(OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

   /**
   * Timestamp of resource upload.
   * @return uploadDate
  **/
  @Schema(example = "2011-03-21T00:18:56-07:00", description = "Timestamp of resource upload.")
  public OffsetDateTime getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
  }

  public ResourceAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date-time of resource creation.
   * @return createdAt
  **/
  @Schema(example = "2011-03-21T00:18:56-07:00", description = "Date-time of resource creation.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public ResourceAttributes updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Date-time of resource modification.
   * @return updatedAt
  **/
  @Schema(example = "2011-03-21T00:18:56-07:00", description = "Date-time of resource modification.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public ResourceAttributes accessedAt(OffsetDateTime accessedAt) {
    this.accessedAt = accessedAt;
    return this;
  }

   /**
   * Date-time of the time when resource was accessed.
   * @return accessedAt
  **/
  @Schema(example = "2011-03-21T00:18:56-07:00", description = "Date-time of the time when resource was accessed.")
  public OffsetDateTime getAccessedAt() {
    return accessedAt;
  }

  public void setAccessedAt(OffsetDateTime accessedAt) {
    this.accessedAt = accessedAt;
  }

  public ResourceAttributes createdTime(Integer createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * UNIX timestamp of resource creation
   * @return createdTime
  **/
  @Schema(description = "UNIX timestamp of resource creation")
  public Integer getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(Integer createdTime) {
    this.createdTime = createdTime;
  }

  public ResourceAttributes updatedTime(Integer updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * UNIX timestamp of resource modification
   * @return updatedTime
  **/
  @Schema(description = "UNIX timestamp of resource modification")
  public Integer getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(Integer updatedTime) {
    this.updatedTime = updatedTime;
  }

  public ResourceAttributes accessedTime(Integer accessedTime) {
    this.accessedTime = accessedTime;
    return this;
  }

   /**
   * UNIX timestamp of last access
   * @return accessedTime
  **/
  @Schema(description = "UNIX timestamp of last access")
  public Integer getAccessedTime() {
    return accessedTime;
  }

  public void setAccessedTime(Integer accessedTime) {
    this.accessedTime = accessedTime;
  }

  public ResourceAttributes path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Full path to the resource.
   * @return path
  **/
  @Schema(example = "/examplefolder", description = "Full path to the resource.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public ResourceAttributes size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Resource size in bytes
   * @return size
  **/
  @Schema(example = "0", description = "Resource size in bytes")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public ResourceAttributes fileCount(Integer fileCount) {
    this.fileCount = fileCount;
    return this;
  }

   /**
   * Number of files within folder. null if resource type is a file.
   * @return fileCount
  **/
  @Schema(description = "Number of files within folder. null if resource type is a file.")
  public Integer getFileCount() {
    return fileCount;
  }

  public void setFileCount(Integer fileCount) {
    this.fileCount = fileCount;
  }

  public ResourceAttributes previewable(Boolean previewable) {
    this.previewable = previewable;
    return this;
  }

   /**
   * Can resource be previewed. Property equals &#x60;null&#x60; if resource &#x60;type&#x60; is dir.
   * @return previewable
  **/
  @Schema(example = "true", description = "Can resource be previewed. Property equals `null` if resource `type` is dir.")
  public Boolean isPreviewable() {
    return previewable;
  }

  public void setPreviewable(Boolean previewable) {
    this.previewable = previewable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceAttributes resourceAttributes = (ResourceAttributes) o;
    return Objects.equals(this.hash, resourceAttributes.hash) &&
        Objects.equals(this.name, resourceAttributes.name) &&
        Objects.equals(this.extension, resourceAttributes.extension) &&
        Objects.equals(this.type, resourceAttributes.type) &&
        Objects.equals(this.createdBy, resourceAttributes.createdBy) &&
        Objects.equals(this.uploadDate, resourceAttributes.uploadDate) &&
        Objects.equals(this.createdAt, resourceAttributes.createdAt) &&
        Objects.equals(this.updatedAt, resourceAttributes.updatedAt) &&
        Objects.equals(this.accessedAt, resourceAttributes.accessedAt) &&
        Objects.equals(this.createdTime, resourceAttributes.createdTime) &&
        Objects.equals(this.updatedTime, resourceAttributes.updatedTime) &&
        Objects.equals(this.accessedTime, resourceAttributes.accessedTime) &&
        Objects.equals(this.path, resourceAttributes.path) &&
        Objects.equals(this.size, resourceAttributes.size) &&
        Objects.equals(this.fileCount, resourceAttributes.fileCount) &&
        Objects.equals(this.previewable, resourceAttributes.previewable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, name, extension, type, createdBy, uploadDate, createdAt, updatedAt, accessedAt, createdTime, updatedTime, accessedTime, path, size, fileCount, previewable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceAttributes {\n");
    
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    accessedAt: ").append(toIndentedString(accessedAt)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    accessedTime: ").append(toIndentedString(accessedTime)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    previewable: ").append(toIndentedString(previewable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.exavault.client.model.AccessMode;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * WebhookV2EventDataShare
 */


public class WebhookV2EventDataShare {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("hasPassword")
  private Boolean hasPassword = null;

  @SerializedName("isPublic")
  private Boolean isPublic = null;

  @SerializedName("accessMode")
  private AccessMode accessMode = null;

  @SerializedName("accessDescription")
  private String accessDescription = null;

  @SerializedName("embed")
  private Boolean embed = null;

  @SerializedName("hash")
  private String hash = null;

  @SerializedName("ownerHash")
  private String ownerHash = null;

  @SerializedName("expiration")
  private String expiration = null;

  @SerializedName("trackingStatus")
  private String trackingStatus = null;

  @SerializedName("expired")
  private Boolean expired = null;

  @SerializedName("resent")
  private Boolean resent = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("requireEmail")
  private Boolean requireEmail = null;

  @SerializedName("fileDropCreateFolders")
  private Boolean fileDropCreateFolders = null;

  @SerializedName("formId")
  private Integer formId = null;

  @SerializedName("assets")
  private List<String> assets = null;

  @SerializedName("paths")
  private List<String> paths = null;

  @SerializedName("recipients")
  private List<Object> recipients = null;

  @SerializedName("messages")
  private List<Object> messages = null;

  @SerializedName("inherited")
  private Boolean inherited = null;

  @SerializedName("status")
  private Integer status = null;

  @SerializedName("hasNotification")
  private Boolean hasNotification = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("modified")
  private OffsetDateTime modified = null;

  public WebhookV2EventDataShare id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Unique ID of associated receive folder
   * @return id
  **/
  @Schema(description = "Unique ID of associated receive folder")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public WebhookV2EventDataShare name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of receiv
   * @return name
  **/
  @Schema(description = "Name of receiv")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WebhookV2EventDataShare hasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
    return this;
  }

   /**
   * Whether the receive folder requires visitors to enter a password
   * @return hasPassword
  **/
  @Schema(description = "Whether the receive folder requires visitors to enter a password")
  public Boolean isHasPassword() {
    return hasPassword;
  }

  public void setHasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
  }

  public WebhookV2EventDataShare isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

   /**
   * Whether visitors can acccess the receive folder without an invitation link
   * @return isPublic
  **/
  @Schema(description = "Whether visitors can acccess the receive folder without an invitation link")
  public Boolean isIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }

  public WebhookV2EventDataShare accessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
    return this;
  }

   /**
   * Get accessMode
   * @return accessMode
  **/
  @Schema(description = "")
  public AccessMode getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
  }

  public WebhookV2EventDataShare accessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
    return this;
  }

   /**
   * Human readable description of what visitors are allowed to do with the receive folder
   * @return accessDescription
  **/
  @Schema(description = "Human readable description of what visitors are allowed to do with the receive folder")
  public String getAccessDescription() {
    return accessDescription;
  }

  public void setAccessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
  }

  public WebhookV2EventDataShare embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

   /**
   * Whether the receive folder can be embedded within a web page
   * @return embed
  **/
  @Schema(description = "Whether the receive folder can be embedded within a web page")
  public Boolean isEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }

  public WebhookV2EventDataShare hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Hash value of the receive
   * @return hash
  **/
  @Schema(description = "Hash value of the receive")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public WebhookV2EventDataShare ownerHash(String ownerHash) {
    this.ownerHash = ownerHash;
    return this;
  }

   /**
   * Hash value of the user who \&quot;owns\&quot; the receive fo
   * @return ownerHash
  **/
  @Schema(description = "Hash value of the user who \"owns\" the receive fo")
  public String getOwnerHash() {
    return ownerHash;
  }

  public void setOwnerHash(String ownerHash) {
    this.ownerHash = ownerHash;
  }

  public WebhookV2EventDataShare expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Date and time when the receive folder will no longer be 
   * @return expiration
  **/
  @Schema(description = "Date and time when the receive folder will no longer be ")
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public WebhookV2EventDataShare trackingStatus(String trackingStatus) {
    this.trackingStatus = trackingStatus;
    return this;
  }

   /**
   * Status of invitations sent for this receive folder
   * @return trackingStatus
  **/
  @Schema(description = "Status of invitations sent for this receive folder")
  public String getTrackingStatus() {
    return trackingStatus;
  }

  public void setTrackingStatus(String trackingStatus) {
    this.trackingStatus = trackingStatus;
  }

  public WebhookV2EventDataShare expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

   /**
   * Whether access to the receive folder has expired
   * @return expired
  **/
  @Schema(description = "Whether access to the receive folder has expired")
  public Boolean isExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }

  public WebhookV2EventDataShare resent(Boolean resent) {
    this.resent = resent;
    return this;
  }

   /**
   * Whether invitations to the receive folder have been re-sent to recipients
   * @return resent
  **/
  @Schema(description = "Whether invitations to the receive folder have been re-sent to recipients")
  public Boolean isResent() {
    return resent;
  }

  public void setResent(Boolean resent) {
    this.resent = resent;
  }

  public WebhookV2EventDataShare type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of share **\&quot;receive\&quot;**
   * @return type
  **/
  @Schema(description = "Type of share **\"receive\"**")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public WebhookV2EventDataShare requireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
    return this;
  }

   /**
   * Whether visitors must enter their email addresses to access the receive folder
   * @return requireEmail
  **/
  @Schema(description = "Whether visitors must enter their email addresses to access the receive folder")
  public Boolean isRequireEmail() {
    return requireEmail;
  }

  public void setRequireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
  }

  public WebhookV2EventDataShare fileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
    return this;
  }

   /**
   * Whether files should be automatically placed in subfolders of the receive folder
   * @return fileDropCreateFolders
  **/
  @Schema(description = "Whether files should be automatically placed in subfolders of the receive folder")
  public Boolean isFileDropCreateFolders() {
    return fileDropCreateFolders;
  }

  public void setFileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
  }

  public WebhookV2EventDataShare formId(Integer formId) {
    this.formId = formId;
    return this;
  }

   /**
   * ID of the associated form
   * @return formId
  **/
  @Schema(description = "ID of the associated form")
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(Integer formId) {
    this.formId = formId;
  }

  public WebhookV2EventDataShare assets(List<String> assets) {
    this.assets = assets;
    return this;
  }

  public WebhookV2EventDataShare addAssetsItem(String assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<String>();
    }
    this.assets.add(assetsItem);
    return this;
  }

   /**
   * List of items included in the share
   * @return assets
  **/
  @Schema(description = "List of items included in the share")
  public List<String> getAssets() {
    return assets;
  }

  public void setAssets(List<String> assets) {
    this.assets = assets;
  }

  public WebhookV2EventDataShare paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public WebhookV2EventDataShare addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<String>();
    }
    this.paths.add(pathsItem);
    return this;
  }

   /**
   * List
   * @return paths
  **/
  @Schema(description = "List")
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }

  public WebhookV2EventDataShare recipients(List<Object> recipients) {
    this.recipients = recipients;
    return this;
  }

  public WebhookV2EventDataShare addRecipientsItem(Object recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<Object>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * List of recipients invited  to the receive folder
   * @return recipients
  **/
  @Schema(description = "List of recipients invited  to the receive folder")
  public List<Object> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<Object> recipients) {
    this.recipients = recipients;
  }

  public WebhookV2EventDataShare messages(List<Object> messages) {
    this.messages = messages;
    return this;
  }

  public WebhookV2EventDataShare addMessagesItem(Object messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<Object>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Invitation messages sent for receive folder
   * @return messages
  **/
  @Schema(description = "Invitation messages sent for receive folder")
  public List<Object> getMessages() {
    return messages;
  }

  public void setMessages(List<Object> messages) {
    this.messages = messages;
  }

  public WebhookV2EventDataShare inherited(Boolean inherited) {
    this.inherited = inherited;
    return this;
  }

   /**
   * Whether this share is inherited from a parent fol
   * @return inherited
  **/
  @Schema(description = "Whether this share is inherited from a parent fol")
  public Boolean isInherited() {
    return inherited;
  }

  public void setInherited(Boolean inherited) {
    this.inherited = inherited;
  }

  public WebhookV2EventDataShare status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * 1 if share is active. 0 if not.
   * @return status
  **/
  @Schema(description = "1 if share is active. 0 if not.")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public WebhookV2EventDataShare hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

   /**
   * Whether delivery receipts are enabled for this share
   * @return hasNotification
  **/
  @Schema(description = "Whether delivery receipts are enabled for this share")
  public Boolean isHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }

  public WebhookV2EventDataShare created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Date and ti
   * @return created
  **/
  @Schema(description = "Date and ti")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public WebhookV2EventDataShare modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Date and time when the share was last changed
   * @return modified
  **/
  @Schema(description = "Date and time when the share was last changed")
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookV2EventDataShare webhookV2EventDataShare = (WebhookV2EventDataShare) o;
    return Objects.equals(this.id, webhookV2EventDataShare.id) &&
        Objects.equals(this.name, webhookV2EventDataShare.name) &&
        Objects.equals(this.hasPassword, webhookV2EventDataShare.hasPassword) &&
        Objects.equals(this.isPublic, webhookV2EventDataShare.isPublic) &&
        Objects.equals(this.accessMode, webhookV2EventDataShare.accessMode) &&
        Objects.equals(this.accessDescription, webhookV2EventDataShare.accessDescription) &&
        Objects.equals(this.embed, webhookV2EventDataShare.embed) &&
        Objects.equals(this.hash, webhookV2EventDataShare.hash) &&
        Objects.equals(this.ownerHash, webhookV2EventDataShare.ownerHash) &&
        Objects.equals(this.expiration, webhookV2EventDataShare.expiration) &&
        Objects.equals(this.trackingStatus, webhookV2EventDataShare.trackingStatus) &&
        Objects.equals(this.expired, webhookV2EventDataShare.expired) &&
        Objects.equals(this.resent, webhookV2EventDataShare.resent) &&
        Objects.equals(this.type, webhookV2EventDataShare.type) &&
        Objects.equals(this.requireEmail, webhookV2EventDataShare.requireEmail) &&
        Objects.equals(this.fileDropCreateFolders, webhookV2EventDataShare.fileDropCreateFolders) &&
        Objects.equals(this.formId, webhookV2EventDataShare.formId) &&
        Objects.equals(this.assets, webhookV2EventDataShare.assets) &&
        Objects.equals(this.paths, webhookV2EventDataShare.paths) &&
        Objects.equals(this.recipients, webhookV2EventDataShare.recipients) &&
        Objects.equals(this.messages, webhookV2EventDataShare.messages) &&
        Objects.equals(this.inherited, webhookV2EventDataShare.inherited) &&
        Objects.equals(this.status, webhookV2EventDataShare.status) &&
        Objects.equals(this.hasNotification, webhookV2EventDataShare.hasNotification) &&
        Objects.equals(this.created, webhookV2EventDataShare.created) &&
        Objects.equals(this.modified, webhookV2EventDataShare.modified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, hasPassword, isPublic, accessMode, accessDescription, embed, hash, ownerHash, expiration, trackingStatus, expired, resent, type, requireEmail, fileDropCreateFolders, formId, assets, paths, recipients, messages, inherited, status, hasNotification, created, modified);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookV2EventDataShare {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    accessDescription: ").append(toIndentedString(accessDescription)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    ownerHash: ").append(toIndentedString(ownerHash)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    trackingStatus: ").append(toIndentedString(trackingStatus)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    resent: ").append(toIndentedString(resent)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    requireEmail: ").append(toIndentedString(requireEmail)).append("\n");
    sb.append("    fileDropCreateFolders: ").append(toIndentedString(fileDropCreateFolders)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

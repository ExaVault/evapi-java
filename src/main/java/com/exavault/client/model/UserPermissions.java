/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * UserPermissions
 */


public class UserPermissions {
  @SerializedName("download")
  private Boolean download = null;

  @SerializedName("upload")
  private Boolean upload = null;

  @SerializedName("modify")
  private Boolean modify = null;

  @SerializedName("delete")
  private Boolean delete = null;

  @SerializedName("list")
  private Boolean list = null;

  @SerializedName("changePassword")
  private Boolean changePassword = null;

  @SerializedName("share")
  private Boolean share = null;

  @SerializedName("notification")
  private Boolean notification = null;

  @SerializedName("viewFormData")
  private Boolean viewFormData = null;

  @SerializedName("deleteFormData")
  private Boolean deleteFormData = null;

  public UserPermissions download(Boolean download) {
    this.download = download;
    return this;
  }

   /**
   * Download permission flag
   * @return download
  **/
  @Schema(required = true, description = "Download permission flag")
  public Boolean isDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }

  public UserPermissions upload(Boolean upload) {
    this.upload = upload;
    return this;
  }

   /**
   * Upload permission flag
   * @return upload
  **/
  @Schema(required = true, description = "Upload permission flag")
  public Boolean isUpload() {
    return upload;
  }

  public void setUpload(Boolean upload) {
    this.upload = upload;
  }

  public UserPermissions modify(Boolean modify) {
    this.modify = modify;
    return this;
  }

   /**
   * Modify permission flag
   * @return modify
  **/
  @Schema(required = true, description = "Modify permission flag")
  public Boolean isModify() {
    return modify;
  }

  public void setModify(Boolean modify) {
    this.modify = modify;
  }

  public UserPermissions delete(Boolean delete) {
    this.delete = delete;
    return this;
  }

   /**
   * Delete permission flag
   * @return delete
  **/
  @Schema(required = true, description = "Delete permission flag")
  public Boolean isDelete() {
    return delete;
  }

  public void setDelete(Boolean delete) {
    this.delete = delete;
  }

  public UserPermissions list(Boolean list) {
    this.list = list;
    return this;
  }

   /**
   * View folder contents permission flag
   * @return list
  **/
  @Schema(required = true, description = "View folder contents permission flag")
  public Boolean isList() {
    return list;
  }

  public void setList(Boolean list) {
    this.list = list;
  }

  public UserPermissions changePassword(Boolean changePassword) {
    this.changePassword = changePassword;
    return this;
  }

   /**
   * Change (own) password permission flag
   * @return changePassword
  **/
  @Schema(required = true, description = "Change (own) password permission flag")
  public Boolean isChangePassword() {
    return changePassword;
  }

  public void setChangePassword(Boolean changePassword) {
    this.changePassword = changePassword;
  }

  public UserPermissions share(Boolean share) {
    this.share = share;
    return this;
  }

   /**
   * Sharing permission flag
   * @return share
  **/
  @Schema(required = true, description = "Sharing permission flag")
  public Boolean isShare() {
    return share;
  }

  public void setShare(Boolean share) {
    this.share = share;
  }

  public UserPermissions notification(Boolean notification) {
    this.notification = notification;
    return this;
  }

   /**
   * Notifications permission flag
   * @return notification
  **/
  @Schema(required = true, description = "Notifications permission flag")
  public Boolean isNotification() {
    return notification;
  }

  public void setNotification(Boolean notification) {
    this.notification = notification;
  }

  public UserPermissions viewFormData(Boolean viewFormData) {
    this.viewFormData = viewFormData;
    return this;
  }

   /**
   * Access Form Data permission flag. If true, user can view submissions that have been stored for a receive folder. This includes any data submitted in the receive folder form.
   * @return viewFormData
  **/
  @Schema(required = true, description = "Access Form Data permission flag. If true, user can view submissions that have been stored for a receive folder. This includes any data submitted in the receive folder form.")
  public Boolean isViewFormData() {
    return viewFormData;
  }

  public void setViewFormData(Boolean viewFormData) {
    this.viewFormData = viewFormData;
  }

  public UserPermissions deleteFormData(Boolean deleteFormData) {
    this.deleteFormData = deleteFormData;
    return this;
  }

   /**
   * Delete form data permission flag. If true, user can remove data that was submitted for a receive folder. This applies only to data submitted in the receive folder form, not the actual files uploaded.
   * @return deleteFormData
  **/
  @Schema(required = true, description = "Delete form data permission flag. If true, user can remove data that was submitted for a receive folder. This applies only to data submitted in the receive folder form, not the actual files uploaded.")
  public Boolean isDeleteFormData() {
    return deleteFormData;
  }

  public void setDeleteFormData(Boolean deleteFormData) {
    this.deleteFormData = deleteFormData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPermissions userPermissions = (UserPermissions) o;
    return Objects.equals(this.download, userPermissions.download) &&
        Objects.equals(this.upload, userPermissions.upload) &&
        Objects.equals(this.modify, userPermissions.modify) &&
        Objects.equals(this.delete, userPermissions.delete) &&
        Objects.equals(this.list, userPermissions.list) &&
        Objects.equals(this.changePassword, userPermissions.changePassword) &&
        Objects.equals(this.share, userPermissions.share) &&
        Objects.equals(this.notification, userPermissions.notification) &&
        Objects.equals(this.viewFormData, userPermissions.viewFormData) &&
        Objects.equals(this.deleteFormData, userPermissions.deleteFormData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(download, upload, modify, delete, list, changePassword, share, notification, viewFormData, deleteFormData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPermissions {\n");
    
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    modify: ").append(toIndentedString(modify)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    list: ").append(toIndentedString(list)).append("\n");
    sb.append("    changePassword: ").append(toIndentedString(changePassword)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    viewFormData: ").append(toIndentedString(viewFormData)).append("\n");
    sb.append("    deleteFormData: ").append(toIndentedString(deleteFormData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

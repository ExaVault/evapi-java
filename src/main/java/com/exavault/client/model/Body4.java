/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Body4
 */


public class Body4 {
  /**
   * What kind of notification you&#x27;re making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FILE("file"),
    FOLDER("folder");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("resource")
  private String resource = null;

  /**
   * Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    UPLOAD("upload"),
    DOWNLOAD("download"),
    DELETE("delete"),
    ALL("all");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("usernames")
  private List<String> usernames = new ArrayList<String>();

  @SerializedName("sendEmail")
  private Boolean sendEmail = null;

  @SerializedName("recipients")
  private List<String> recipients = null;

  @SerializedName("message")
  private String message = null;

  public Body4 type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * What kind of notification you&#x27;re making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource
   * @return type
  **/
  @Schema(example = "file", required = true, description = "What kind of notification you're making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Body4 resource(String resource) {
    this.resource = resource;
    return this;
  }

   /**
   * Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.
   * @return resource
  **/
  @Schema(required = true, description = "Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.")
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }

  public Body4 action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
   * @return action
  **/
  @Schema(example = "upload", required = true, description = "Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public Body4 usernames(List<String> usernames) {
    this.usernames = usernames;
    return this;
  }

  public Body4 addUsernamesItem(String usernamesItem) {
    this.usernames.add(usernamesItem);
    return this;
  }

   /**
   * Determines which users&#x27; actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients
   * @return usernames
  **/
  @Schema(required = true, description = "Determines which users' actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients")
  public List<String> getUsernames() {
    return usernames;
  }

  public void setUsernames(List<String> usernames) {
    this.usernames = usernames;
  }

  public Body4 sendEmail(Boolean sendEmail) {
    this.sendEmail = sendEmail;
    return this;
  }

   /**
   * Set to true if the user should be notified by email when the notification is triggered.
   * @return sendEmail
  **/
  @Schema(example = "true", required = true, description = "Set to true if the user should be notified by email when the notification is triggered.")
  public Boolean isSendEmail() {
    return sendEmail;
  }

  public void setSendEmail(Boolean sendEmail) {
    this.sendEmail = sendEmail;
  }

  public Body4 recipients(List<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public Body4 addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<String>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Email addresses to send notification emails to. If not specified, sends to the current user&#x27;s email address.
   * @return recipients
  **/
  @Schema(example = "[\"myemail@example.com\"]", description = "Email addresses to send notification emails to. If not specified, sends to the current user's email address.")
  public List<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<String> recipients) {
    this.recipients = recipients;
  }

  public Body4 message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Custom message to include in notification emails.
   * @return message
  **/
  @Schema(description = "Custom message to include in notification emails.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body4 body4 = (Body4) o;
    return Objects.equals(this.type, body4.type) &&
        Objects.equals(this.resource, body4.resource) &&
        Objects.equals(this.action, body4.action) &&
        Objects.equals(this.usernames, body4.usernames) &&
        Objects.equals(this.sendEmail, body4.sendEmail) &&
        Objects.equals(this.recipients, body4.recipients) &&
        Objects.equals(this.message, body4.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, resource, action, usernames, sendEmail, recipients, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body4 {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    usernames: ").append(toIndentedString(usernames)).append("\n");
    sb.append("    sendEmail: ").append(toIndentedString(sendEmail)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

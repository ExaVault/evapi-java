/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * WebhookTriggersResources
 */


public class WebhookTriggersResources {
  @SerializedName("upload")
  private Boolean upload = null;

  @SerializedName("download")
  private Boolean download = null;

  @SerializedName("delete")
  private Boolean delete = null;

  @SerializedName("rename")
  private Boolean rename = null;

  @SerializedName("copy")
  private Boolean copy = null;

  @SerializedName("move")
  private Boolean move = null;

  @SerializedName("compress")
  private Boolean compress = null;

  @SerializedName("extract")
  private Boolean extract = null;

  @SerializedName("createFolder")
  private Boolean createFolder = null;

  public WebhookTriggersResources upload(Boolean upload) {
    this.upload = upload;
    return this;
  }

   /**
   * Send webhook messages when resources are uploaded.
   * @return upload
  **/
  @Schema(description = "Send webhook messages when resources are uploaded.")
  public Boolean isUpload() {
    return upload;
  }

  public void setUpload(Boolean upload) {
    this.upload = upload;
  }

  public WebhookTriggersResources download(Boolean download) {
    this.download = download;
    return this;
  }

   /**
   * Send webhook messages when resources are downloaded.
   * @return download
  **/
  @Schema(description = "Send webhook messages when resources are downloaded.")
  public Boolean isDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }

  public WebhookTriggersResources delete(Boolean delete) {
    this.delete = delete;
    return this;
  }

   /**
   * Send webhook messages when resources are deleted
   * @return delete
  **/
  @Schema(description = "Send webhook messages when resources are deleted")
  public Boolean isDelete() {
    return delete;
  }

  public void setDelete(Boolean delete) {
    this.delete = delete;
  }

  public WebhookTriggersResources rename(Boolean rename) {
    this.rename = rename;
    return this;
  }

   /**
   * Send webhook messages when resources are renamed.
   * @return rename
  **/
  @Schema(description = "Send webhook messages when resources are renamed.")
  public Boolean isRename() {
    return rename;
  }

  public void setRename(Boolean rename) {
    this.rename = rename;
  }

  public WebhookTriggersResources copy(Boolean copy) {
    this.copy = copy;
    return this;
  }

   /**
   * Send webhook messages when resources are copied.
   * @return copy
  **/
  @Schema(description = "Send webhook messages when resources are copied.")
  public Boolean isCopy() {
    return copy;
  }

  public void setCopy(Boolean copy) {
    this.copy = copy;
  }

  public WebhookTriggersResources move(Boolean move) {
    this.move = move;
    return this;
  }

   /**
   * Send webhook messages when resources are moved.
   * @return move
  **/
  @Schema(description = "Send webhook messages when resources are moved.")
  public Boolean isMove() {
    return move;
  }

  public void setMove(Boolean move) {
    this.move = move;
  }

  public WebhookTriggersResources compress(Boolean compress) {
    this.compress = compress;
    return this;
  }

   /**
   * Send webhook messages when resources are compressed into an archive.
   * @return compress
  **/
  @Schema(description = "Send webhook messages when resources are compressed into an archive.")
  public Boolean isCompress() {
    return compress;
  }

  public void setCompress(Boolean compress) {
    this.compress = compress;
  }

  public WebhookTriggersResources extract(Boolean extract) {
    this.extract = extract;
    return this;
  }

   /**
   * Send webhook messages when resources are extracted from an archive.
   * @return extract
  **/
  @Schema(description = "Send webhook messages when resources are extracted from an archive.")
  public Boolean isExtract() {
    return extract;
  }

  public void setExtract(Boolean extract) {
    this.extract = extract;
  }

  public WebhookTriggersResources createFolder(Boolean createFolder) {
    this.createFolder = createFolder;
    return this;
  }

   /**
   * Send webhook messages when a new folder is created.
   * @return createFolder
  **/
  @Schema(description = "Send webhook messages when a new folder is created.")
  public Boolean isCreateFolder() {
    return createFolder;
  }

  public void setCreateFolder(Boolean createFolder) {
    this.createFolder = createFolder;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookTriggersResources webhookTriggersResources = (WebhookTriggersResources) o;
    return Objects.equals(this.upload, webhookTriggersResources.upload) &&
        Objects.equals(this.download, webhookTriggersResources.download) &&
        Objects.equals(this.delete, webhookTriggersResources.delete) &&
        Objects.equals(this.rename, webhookTriggersResources.rename) &&
        Objects.equals(this.copy, webhookTriggersResources.copy) &&
        Objects.equals(this.move, webhookTriggersResources.move) &&
        Objects.equals(this.compress, webhookTriggersResources.compress) &&
        Objects.equals(this.extract, webhookTriggersResources.extract) &&
        Objects.equals(this.createFolder, webhookTriggersResources.createFolder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(upload, download, delete, rename, copy, move, compress, extract, createFolder);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookTriggersResources {\n");
    
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    rename: ").append(toIndentedString(rename)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    move: ").append(toIndentedString(move)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    extract: ").append(toIndentedString(extract)).append("\n");
    sb.append("    createFolder: ").append(toIndentedString(createFolder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

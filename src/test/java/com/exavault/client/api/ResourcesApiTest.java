/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.api;

import com.exavault.client.ApiException;
import com.exavault.client.model.AddFolderRequestBody;
import com.exavault.client.model.CompressFilesRequestBody;
import com.exavault.client.model.CopyResourcesRequestBody;
import com.exavault.client.model.DeleteResourcesRequestBody;
import com.exavault.client.model.DownloadPollingResponse;
import com.exavault.client.model.EmptyResponse;
import com.exavault.client.model.ExtractFilesRequestBody;
import java.io.File;
import com.exavault.client.model.MoveResourcesRequestBody;
import com.exavault.client.model.PreviewFileResponse;
import com.exavault.client.model.ResourceCollectionResponse;
import com.exavault.client.model.ResourceCopyMove;
import com.exavault.client.model.ResourceMultiResponse;
import com.exavault.client.model.ResourceResponse;
import com.exavault.client.model.UpdateReourceByIdRequestBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesApi
 */
@Ignore
public class ResourcesApiTest {

    private final ResourcesApi api = new ResourcesApi();

    /**
     * Create a folder
     *
     * Create a new empty folder at the specified path. New files can be uploaded via the [/resources/upload](#operation/uploadFile) endpoint.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFolderTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        AddFolderRequestBody body = null;
        ResourceResponse response = api.addFolder(evApiKey, evAccessToken, body);

        // TODO: test validations
    }
    /**
     * Compress resources
     *
     * Create a zip archive containing the files from given set of paths. Note that this can be a very slow operation if you have indicated many files should be included in the archive.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void compressFilesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        CompressFilesRequestBody body = null;
        ResourceResponse response = api.compressFiles(evApiKey, evAccessToken, body);

        // TODO: test validations
    }
    /**
     * Copy resources
     *
     * Copies a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be copied to the  root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        CopyResourcesRequestBody body = null;
        ResourceCopyMove response = api.copyResources(evApiKey, evAccessToken, body);

        // TODO: test validations
    }
    /**
     * Delete a Resource
     *
     * Delete a single file or folder resource. Deleting a folder will also delete all of the contents.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - There is no way to un-delete a deleted resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResourceByIdTest() throws ApiException {
        Integer id = null;
        String evApiKey = null;
        String evAccessToken = null;
        EmptyResponse response = api.deleteResourceById(id, evApiKey, evAccessToken);

        // TODO: test validations
    }
    /**
     * Delete Resources
     *
     * Delete multiple file or folder resourcess. Deleting a folder resource will also delete any resources in that folder.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - It is not possible to un-delete a deleted resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        DeleteResourcesRequestBody body = null;
        EmptyResponse response = api.deleteResources(evApiKey, evAccessToken, body);

        // TODO: test validations
    }
    /**
     * Download a file
     *
     * Downloads a file. If more than one path is supplied, the files will be zipped before downloading with the downloadArchiveName parameter if supplied. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        List<String> resources = null;
        String downloadArchiveName = null;
        Boolean polling = null;
        String pollingArchiveName = null;
        File response = api.download(evApiKey, evAccessToken, resources, downloadArchiveName, polling, pollingArchiveName);

        // TODO: test validations
    }
    /**
     * Extract resources
     *
     * Extract the contents of a zip archive to a specified directory. Note that this can be a very slow operation.  **Notes:** - You must have  [modify permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to do this. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void extractFilesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        ExtractFilesRequestBody body = null;
        ResourceCollectionResponse response = api.extractFiles(evApiKey, evAccessToken, body);

        // TODO: test validations
    }
    /**
     * Preview a file
     *
     * Returns a resized image of the specified document for supported file types.  Image data returned is encoded in base64 format and can be viewed using the &#x60;&lt;img&gt;&#x60; element.   &#x60;&#x60;&#x60;&lt;img src&#x3D;&#x27;data:image/jpeg;base64&#x27; + meta.image/&gt;&#x60;&#x60;&#x60;  **Notes:** - Supported files types are &#x60;&#x27;jpg&#x27;&#x60;, &#x60;&#x27;jpeg&#x27;&#x60;, &#x60;&#x27;gif&#x27;&#x60;, &#x60;&#x27;png&#x27;&#x60;, &#x60;&#x27;bmp&#x27;&#x60;, &#x60;&#x27;pdf&#x27;&#x60;, &#x60;&#x27;psd&#x27;&#x60;, &#x60;&#x27;doc&#x27;&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPreviewImageTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String resource = null;
        String size = null;
        Integer width = null;
        Integer height = null;
        Integer page = null;
        PreviewFileResponse response = api.getPreviewImage(evApiKey, evAccessToken, resource, size, width, height, page);

        // TODO: test validations
    }
    /**
     * Get Resource Properties
     *
     * Returns details for specified file/folder id or hash, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourceInfoTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String resource = null;
        String include = null;
        ResourceResponse response = api.getResourceInfo(evApiKey, evAccessToken, resource, include);

        // TODO: test validations
    }
    /**
     * Get resource metadata
     *
     * Returns metadata for specified file/folder path, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourceInfoByIdTest() throws ApiException {
        Integer id = null;
        String evApiKey = null;
        String evAccessToken = null;
        String include = null;
        ResourceResponse response = api.getResourceInfoById(id, evApiKey, evAccessToken, include);

        // TODO: test validations
    }
    /**
     * List contents of folder
     *
     * Returns a list of files/folders for the parent resource ID.   You can use this API call to get information about all files and folders at a specified path. By default, the API returns basic metadata on each file/folder. An optional &#x60;include&#x60; parameter forces the return of additional metadata. As with all API calls, the path should be the full path relative to the user&#x27;s home directory (e.g. **_/myfiles/some_folder**).  **Notes:** - Authenticated user should have list permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listResourceContentsTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        Integer id = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String include = null;
        ResourceCollectionResponse response = api.listResourceContents(evApiKey, evAccessToken, id, sort, offset, limit, type, include);

        // TODO: test validations
    }
    /**
     * Get a list of all resources
     *
     * Returns a list of files and folders in the account. Use the &#x60;resource&#x60; query parameter to indicate the folder you wish to search in (which can be /).   **Searching for Files and Folders**  Using the &#x60;name&#x60; parameter triggers search mode, which will search the entire directory structure under the provided &#x60;resource&#x60; for files or folders with names matching the provided &#x60;name&#x60;. This supports wildcard matching such as:  - \\*Report\\* would find any files or folders with \&quot;Report\&quot; in the name. - Data\\_202?-09-30.xlsx would match items such as \&quot;Data\\_2020-09-30.xlsx\&quot;, \&quot;DATA\\_2021-09-30.xlsx\&quot;, \&quot;data\\_2022-09-30.xlsx\&quot; etc. - sales\\* would find any files or folders starting with the word \&quot;Sales\&quot; - \\*.csv would locate any files ending in \&quot;.csv\&quot; - \\* matches everything within the directory tree starting at your given &#x60;resource&#x60;  The search is not case-sensitive. Searching for Clients\\* or clients\\* or CLIENTS\\*, etc. will provide identical results  You cannot use the &#x60;type&#x60; parameter if you are using the &#x60;name&#x60; parameter to run a search.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String resource = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String name = null;
        String include = null;
        ResourceCollectionResponse response = api.listResources(evApiKey, evAccessToken, resource, sort, offset, limit, type, name, include);

        // TODO: test validations
    }
    /**
     * Move resources
     *
     * Moves a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be moved to the root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        MoveResourcesRequestBody body = null;
        ResourceCopyMove response = api.moveResources(evApiKey, evAccessToken, body);

        // TODO: test validations
    }
    /**
     * Rename a resource.
     *
     * Update the specified file or folder resource record&#x27;s \&quot;name\&quot; parameter. The resource is identified by the numeric resource ID that is passed in as the last segment of the URI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateResourceByIdTest() throws ApiException {
        String evAccessToken = null;
        String evApiKey = null;
        Integer id = null;
        UpdateReourceByIdRequestBody body = null;
        ResourceResponse response = api.updateResourceById(evAccessToken, evApiKey, id, body);

        // TODO: test validations
    }
    /**
     * Upload a file
     *
     * Uploads a file to a specified path, with optional support for resuming a partially uploaded existing file. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String path = null;
        Integer fileSize = null;
        File file = null;
        Integer offsetBytes = null;
        Boolean resume = null;
        Boolean allowOverwrite = null;
        ResourceResponse response = api.uploadFile(evApiKey, evAccessToken, path, fileSize, file, offsetBytes, resume, allowOverwrite);

        // TODO: test validations
    }
}

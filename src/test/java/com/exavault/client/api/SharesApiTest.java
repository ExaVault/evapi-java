/*
 * ExaVault API
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.exavault.client.api;

import com.exavault.client.ApiException;
import com.exavault.client.model.AddShareRequestBody;
import com.exavault.client.model.EmptyResponse;
import com.exavault.client.model.ShareCollectionResponse;
import com.exavault.client.model.ShareResponse;
import com.exavault.client.model.UpdateShareRequestBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SharesApi
 */
@Ignore
public class SharesApiTest {

    private final SharesApi api = new SharesApi();

    /**
     * Creates a share
     *
     * Creates a new share object for the given path in your account. We support three types of shares:    - A **shared folder** allows you to let outside parties access a folder in your account (including any files and nested subfolders) using just a link. Shared folders can be restricted; e.g. with an expiration date, password, download-only, etc. Shared folders are &#x27;live&#x27;; if someone makes a change to a file in your shared folder, it will be immediately reflected in your account, and vice-versa.   - A file **send** lets you send one or more files via an easy download link. File sends are different than shared folders because file sends are &#x27;point in time&#x27; -- the recipient will get the files as you sent them. If you later make a change to the source file, it will not be updated for the recipient.   - A **receive** folder lets you receive files into your account. You can either send users a link, or optionally [embed a customized form](/docs/account/05-file-sharing/05-upload-widget) on your website.    **How to send files from your computer using the API**:  In order to use the API to send files which are not already stored in your account, you&#x27;ll need to follow a three-step process:  1. Use the [POST /shares](#operation/addShare) endpoint to set up your send, including password, recipients, expiration, etc. You must include **upload** among the permissions in the &#x60;accessMode&#x60; and set the &#x60;sendingLocalFiles&#x60; paramter to **true**. The response that is returned will include a \&quot;meta\&quot; attribute, which contains an **accessToken** attribute. This new access token is valid only for the send. 2. Use the [POST /resources/upload](#operation/uploadFile) endpoint to upload your files to the send you&#x27;ve created. The \&quot;/\&quot; path represents the root of the share, not your home directory. **You must send the access token that you received from the first step in the &#x60;ev-access-token&#x60; header** 3. Use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to indicate that you have finished uploading files to your send. This will trigger the system to remove the **upload** permission from the share and send any invitation emails you set up in the first step of the process. **You must send YOUR access token in the &#x60;ev-access-token&#x60; header, not the temporary access token**  **Notes:**  Authenticated user requires [share permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addShareTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        AddShareRequestBody body = null;
        ShareResponse response = api.addShare(evApiKey, evAccessToken, body);

        // TODO: test validations
    }
    /**
     * Complete send files
     *
     * After uploading the file(s) to be sent, this method will trigger invitation emails and finish the send files setup. If you are not sending files from your own computer in a send, you will not need this step.    **How to send files from your computer using the API**:  In order to use the API to send files which are not already stored in your account, you&#x27;ll need to follow a three-step process:  1. Use the [POST /shares](#operation/addShare) endpoint to set up your send, including password, recipients, expiration, etc. You must include **upload** among the permissions in the &#x60;accessMode&#x60; and set the &#x60;sendingLocalFiles&#x60; paramter to **true**. The response that is returned will include a \&quot;meta\&quot; attribute, which contains an **accessToken** attribute. This new access token is valid only for the send. 2. Use the [POST /resources/upload](#operation/uploadFile) endpoint to upload your files to the send you&#x27;ve created. The \&quot;/\&quot; path represents the root of the share, not your home directory. **You must send the access token that you received from the first step in the &#x60;ev-access-token&#x60; header** 3. Use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to indicate that you have finished uploading files to your send. This will trigger the system to remove the **upload** permission from the share and send any invitation emails you set up in the first step of the process. **You must send YOUR access token in the &#x60;ev-access-token&#x60; header, not the temporary access token** 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completeDirectSendTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        Integer id = null;
        ShareResponse response = api.completeDirectSend(evApiKey, evAccessToken, id);

        // TODO: test validations
    }
    /**
     * Deactivate a share
     *
     * Deactivate a share. Deactivating a share does not remove the underlying files for **shared_folder** and **receive** share types; it merely removes the access URL. Deleting a **send** share type does remove the associated files, as files that have been sent are only associated with the share, and aren&#x27;t stored anywhere else in the account.  **Notes:**  - You must have [sharing permissons](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to use this. - You must have [admin-level access](/docs/account/04-users/01-admin-users), or you must be the owner of the specified share you wish to delete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShareByIdTest() throws ApiException {
        Integer id = null;
        String evApiKey = null;
        String evAccessToken = null;
        EmptyResponse response = api.deleteShareById(id, evApiKey, evAccessToken);

        // TODO: test validations
    }
    /**
     * Get a share
     *
     * Get the details for a specific share entry. You can use the &#x60;include&#x60; parameter to also get the details of related records, such as the owning user or the resources involved in the share.  **Notes:**  - Authenticated user requires [share permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - To get share objects with type send, authenticated user&#x27;s role must be admin or master.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShareByIdTest() throws ApiException {
        Integer id = null;
        String evApiKey = null;
        String evAccessToken = null;
        String include = null;
        ShareResponse response = api.getShareById(id, evApiKey, evAccessToken, include);

        // TODO: test validations
    }
    /**
     * Get a list of shares
     *
     * Get a list of shares that you would have access to view through the web interface. You can limit which results are returned by specifying specific types of shares you wish to view, finding things shared with a specific email address, as well as finding shares for specific folder names.   **Notes:**  - Authenticated user requires [share permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - To get share objects with type send, authenticated user&#x27;s role must be admin or master.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSharesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        Integer offset = null;
        Integer limit = null;
        String scope = null;
        String sort = null;
        String type = null;
        String include = null;
        String name = null;
        String recipient = null;
        String message = null;
        String username = null;
        String search = null;
        ShareCollectionResponse response = api.listShares(evApiKey, evAccessToken, offset, limit, scope, sort, type, include, name, recipient, message, username, search);

        // TODO: test validations
    }
    /**
     * Update a share
     *
     * Change the settings on an active share. Any changes made will affect all users that have access to the share.   When updating invitees, pass the &#x60;recipients&#x60; body paramater with the full list of people who should be included on the share. If you resend the list without an existing recipient, they will be removed from the share.  **Notes:**    - Authenticated user should be the owner of the specified share.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShareByIdTest() throws ApiException {
        UpdateShareRequestBody body = null;
        String evApiKey = null;
        String evAccessToken = null;
        Integer id = null;
        ShareResponse response = api.updateShareById(body, evApiKey, evAccessToken, id);

        // TODO: test validations
    }
}
